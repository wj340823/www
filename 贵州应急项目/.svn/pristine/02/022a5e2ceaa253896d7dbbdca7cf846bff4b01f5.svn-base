package com.sucsoft.gzhbyjwz.service.risksource;

import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.cgs.dc.starter.model.GetOptions;
import com.sucsoft.gzhbyjwz.bean.common.Page;
import com.sucsoft.gzhbyjwz.bean.common.PoiInBean;
import com.sucsoft.gzhbyjwz.bean.common.ResultBean;
import com.sucsoft.gzhbyjwz.bean.dc12.EnvironmentDepartMent;
import com.sucsoft.gzhbyjwz.bean.dc12.EnvironmentTask;
import com.sucsoft.gzhbyjwz.bean.dc12.Task_DepartMent;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.util.JdbcConn;

@Service
public class RiskScreeningService {

	
	@Value("${riskFilePath}")
	private String filePath;
	
	@Autowired
	private BasicQueryService basicQueryService;
	
	@Autowired
	private JdbcConn jdbcConn;

	@Autowired
	private RiskImportService riskImportService;

	Logger logger = Logger.getLogger(this.getClass().getName());

	@Transactional
	public ResultBean distributed(MultipartFile[] files,HttpServletRequest request, EnvironmentTask task) throws Exception {
		ResultBean r = new ResultBean(0,"任务派发成功");
		try{	
			if(task.getStartTime()==null){
				task.setStartTime(new Date());
			}
			if(task.getReleaseTime()==null){
				task.setReleaseTime(new Date());
			}
			Date endTime = new Date();
			if(StringUtils.isNotBlank(task.getEndTimeString())){
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				endTime = sdf.parse(task.getEndTimeString());
				task.setEndTime(endTime);
			}
			task.setTaskId(UUID.randomUUID().toString().replaceAll("-", ""));
			List<String> listDepartMentIds = task.getListDepartMentId();
			for(String d:listDepartMentIds){
				Task_DepartMent task_d = new Task_DepartMent();
				//设置关联表id
				task_d.setId(UUID.randomUUID().toString().replaceAll("-", ""));
				task_d.setDepartMentId(d);
				task_d.setStatus("未完成");
				task_d.setTaskId(task.getTaskId());
				basicQueryService.save(task_d);
			}
			String loadPath = "";
			if(files!=null&&files.length>0){
				  for(int i = 0;i<files.length;i++){ 
				      MultipartFile file = files[i]; 
				      if(!file.isEmpty()){
				    	  String fileName = file.getOriginalFilename();
				    	// 获取文件的后缀名
				  		//String suffixName = fileName.substring(fileName.lastIndexOf("."));				    	  
				    	  String path = filePath+fileName;
				    	  File dest = new File(path);
				    	  // 检测是否存在目录
				    	  if (!dest.getParentFile().exists()) {
				    		  dest.getParentFile().mkdirs();// 新建文件夹
				    	  }
				    	  //如果文件存在 则修改文件名称
				    	  if(dest.exists()){
				    		  fileName = System.currentTimeMillis()+fileName;
				    		  dest = new File(filePath+fileName);
				    	  }
				    	  loadPath += fileName+"!#!";
				    	  String thePath = dest.getAbsolutePath();
				    	  dest = new File(thePath);
						  // 文件写入
				    	  file.transferTo(dest);
				      }
			}
		    task.setFilePath(loadPath);
		}
		//保存任务
		    basicQueryService.save(task);
		}catch(Exception e){
			r.setResult(1);
			r.setMsg("任务派发失败");
			e.printStackTrace();
		}
	    return r;
	}

	@Transactional
	public List<EnvironmentDepartMent> queryUtilDetails() {
		List<EnvironmentDepartMent> utils = basicQueryService.getCrudService().list(EnvironmentDepartMent.class.getName(), new GetOptions(), EnvironmentDepartMent.class);
		return utils;
	}

	@Transactional
	public Map<String, Object> taskWarning() throws Exception {
		Map<String,Object> params = new HashMap<>();
		//7天谴
		Date afterTime = dayAgo(7);		
		//30天后
		Date agoTime = dayAgo(-30);
		//当天0点
		Date today = dayAgo(0);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		//超期7天内
		List<Map> listIn = getTaskWarning(afterTime,today);
		for(Map m:listIn){
			Date end = sdf.parse(m.get("ENDTIME").toString());
			int num = daysOfTwo(end,today);
			m.put("TIMEOUT", "超期"+num+"天");
		}
		//超期7天外
		List<Map> listOut = getTaskWarning(null,afterTime);
		for(Map m:listOut){
			Date end = sdf.parse(m.get("ENDTIME").toString());
			int num = daysOfTwo(end,today);
			m.put("TIMEOUT", "超期"+num+"天");
		}		
		params.put("insevenday", listIn);
		params.put("outsevenday", listOut);
		//到期30天内
		params.put("inthirtyday", getTaskWarning(today,agoTime));		
		return params;
	}
	
	public List<Map> getTaskWarning(Date startTime,Date endTime) throws Exception{		
		Map<String,Object> params = new HashMap<>();
		if(startTime!=null){
			params.put("startTime", startTime);			
		}
		if(endTime!=null){
			params.put("endTime", endTime);
		}
		List<Map> list = basicQueryService.queryForList("getTaskWarning", params, Map.class, 0, 0);
		return list;
	}

	/**
	 * 得到n天前的0点
	 */
	public  Date dayAgo(Integer dayAgo) throws ParseException {
		dayAgo = (dayAgo != null) ? dayAgo : 0;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) - dayAgo);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		Date date = sdf.parse(sdf.format(cal.getTime()));
		return date;
	}
	
	/**
	 * 查询两天之间相差多少天
	 * 
	 * @param fDate
	 *            开始时间
	 * @param oDate
	 *            结束时间
	 * @return
	 */
	public  int daysOfTwo(Date fDate, Date oDate) {

		Calendar aCalendar = Calendar.getInstance();

		aCalendar.setTime(fDate);

		int day1 = aCalendar.get(Calendar.DAY_OF_YEAR);

		aCalendar.setTime(oDate);

		int day2 = aCalendar.get(Calendar.DAY_OF_YEAR);

		return day2 - day1;
	}

	@Transactional
	public List<Map> queryTaskDetails(String taskId) throws Exception {
		Map<String,Object> params = new HashMap<>();
		params.put("taskId", taskId);
		List<Map> listTaskDep = basicQueryService.queryForList("queryTaskAndDep", params, Map.class, 0, 0);
		for(Map m:listTaskDep){
			String fileNames = m.get("FILEPATH")==null?"":m.get("FILEPATH").toString();
			String[] s = fileNames.split("!#!");
			m.put("FILENAMES", s);
		}
		return listTaskDep;
	}

	
	public String downLoadFile(String fileName, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		return jdbcConn.downLoadFile(filePath, fileName, request, response);
	}

	@Transactional
	public Page<Map> taskParameter(String name, Integer pageNo, Integer pageSize) throws Exception {
		Map<String,Object> params = new HashMap<>();
		if(StringUtils.isNotBlank(name)){
			params.put("name","%"+name+"%");
		}
		Page<Map> page = basicQueryService.queryForPage("queryTask", params, Map.class, pageNo, pageSize);
		return page;
	}

	@Transactional
	public ResultBean updateTest(MultipartFile file, HttpServletRequest request, EnvironmentTask task) {
		ResultBean r = new ResultBean(0,"任务派发成功");
		try{	
			if(task.getStartTime()==null){
				task.setStartTime(new Date());
			}
			if(task.getReleaseTime()==null){
				task.setReleaseTime(new Date());
			}
			Date endTime = new Date();
			if(StringUtils.isNotBlank(task.getEndTimeString())){
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				endTime = sdf.parse(task.getEndTimeString());
				task.setEndTime(endTime);
			}			
			task.setTaskId(UUID.randomUUID().toString().replaceAll("-", ""));
			List<String> listDepartMentIds = task.getListDepartMentId();
			for(String d:listDepartMentIds){
				Task_DepartMent task_d = new Task_DepartMent();
				//设置关联表id
				task_d.setId(UUID.randomUUID().toString().replaceAll("-", ""));
				task_d.setDepartMentId(d);
				task_d.setStatus("未完成");
				task_d.setTaskId(task.getTaskId());
				basicQueryService.save(task_d);
			}
	
			String loadPath = "";

			if(file!=null&&!file.isEmpty()){
	    	  String fileName = file.getOriginalFilename();
	    	  String path = filePath+"/"+fileName;
	    	  File dest = new File(path);
	    	  // 检测是否存在目录
	    	  if (!dest.getParentFile().exists()) {
	    		  dest.getParentFile().mkdirs();// 新建文件夹
	    	  }
	    	  //如果文件存在 则修改文件名称
	    	  if(dest.exists()){
	    		  fileName = System.currentTimeMillis()+fileName;
	    		  dest = new File(filePath+"/"+fileName);
	    	  }
	    	  loadPath += fileName+"!#!";
	    	  String thePath = dest.getAbsolutePath();
	    	  dest = new File(thePath);
				// 文件写入
	    	  file.transferTo(dest);
			}				    
		    task.setFilePath(loadPath);
		    //保存任务
		    basicQueryService.save(task);
		}catch(Exception e){
			r.setResult(1);
			r.setMsg("任务派发失败");
			e.printStackTrace();
		}
	    return r;
	}

	@Transactional
	public ResultBean deleteTask(String taskId) {
		ResultBean r = new ResultBean(0,"删除成功");
		if(StringUtils.isBlank(taskId)){
			return new ResultBean(1,"参数为空");
		}
		try{
			EnvironmentTask eTask = basicQueryService.get(taskId, EnvironmentTask.class);
			if(eTask==null){
				return new ResultBean(1,"参数错误");
			}
			Map<String,Object> params = new HashMap<>();
			params.put("taskId", taskId);
			List<Map> listId = basicQueryService.queryForList("queryForTaskByID", params, Map.class, 0, 0);
			for(Map m:listId){
				String id = m.get("ID").toString();
				basicQueryService.delete(id, Task_DepartMent.class);
			}
			basicQueryService.delete(taskId, EnvironmentTask.class);
		}catch(Exception e){
			r.setResult(1);
			r.setMsg("删除失败");
			e.printStackTrace();
		}
		return r;
	}

	public ResultBean addPlanAttachmentList(String path){
		File excel = new File(path);

		ResultBean resultBean = null;
		try {
			resultBean = riskImportService.addAttachmentList(excel);
		} catch (Exception e) {
			resultBean.setResult(0);
			resultBean.setMsg("文件读取存在问题");
		}
		return resultBean;
	}

	public ResultBean addExcelFromLocal() {
		File file = new File("E:\\风险源excel\\925");
		List<File> excels = new ArrayList<>();
		getExcelFiles(excels,file);
		int sum = excels.size();
		int i = 0;
		for (File excel : excels){
			ResultBean r = riskImportService.addExcel(excel);
			if ("导入成功".equals(r.getMsg()) || "该公司名称已经存在".equals(r.getMsg())){
				i++;
				continue;
			}else {
				try {
					copyExcel(excel,"E:\\问题excel\\9-25");
				} catch (IOException e) {
					e.printStackTrace();
					return new ResultBean(2,"问题文件写入失败："+excel.getName());
				}
				logger.info(r.getMsg().toString()+":"+excel.getPath()+excel.getName());
				continue;
			}
		}

		return new ResultBean(0,"导入成功"+"总数："+sum+"成功导入:"+i);
	}

	private void copyExcel(File from, String to) throws IOException {
		File file = new File(to+from.getName());
		int i = 1;
		if (!file.getParentFile().exists()){
			file.getParentFile().mkdirs();
		}
		while (file.exists()){
			file = new File(to+from.getName()+i);
			i++;
		}
		file.createNewFile();
		FileCopyUtils.copy(from,file);
	}


	public void getExcelFiles(List<File> excels,File file){
		if (!file.isDirectory()){
			if (file.getName().endsWith(".xlxs")) {
				excels.add(file);
			}
			return;
		}
		File[] files = file.listFiles();
		for (File file1:files){
			if (file1.isDirectory()) {
				getExcelFiles(excels, file1);
			}else if (file1.getName().endsWith(".xlsx")){
				excels.add(file1);
			}
		}
	}
}
