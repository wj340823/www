package com.sucsoft.gzhbyjwz.service.goods;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sucsoft.gzhbyjwz.bean.common.Page;
import com.sucsoft.gzhbyjwz.service.risksource.RiskSourceService;
import com.sucsoft.gzhbyjwz.util.DateUtils;
import com.sucsoft.gzhbyjwz.util.ExcelUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

//import com.mysql.fabric.xmlrpc.base.Data;
import com.sucsoft.gzhbyjwz.util.time.TimeStateMonth;
import com.sucsoft.gzhbyjwz.util.time.TimeStateYear;
import com.sucsoft.gzhbyjwz.bean.param.GoodsParam;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import org.springframework.util.StringUtils;

import javax.servlet.http.HttpServletResponse;

@Service
public class GoodsService {
	@Autowired
	private BasicQueryService queryService;
	@Autowired
	private GoodsFrequencyService frequencyService;
	@Autowired
	private RiskSourceService riskSourceService;
	
	//条件列表查询物资现状
	public Page listGoods(GoodsParam goodsParam, Integer pageNo, Integer pageSize) throws Exception {
		Map<String, Object> param = new HashMap<>();
		if (goodsParam.getName() != null) {
			param.put("goodsName", "%"+goodsParam.getName()+"%");
		}
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		if (!StringUtils.isEmpty(goodsParam.getXZQY())){
			param.put("xzqy", goodsParam.getXZQY());
		}
		param.put("wareHouseId", goodsParam.getWareHouseId());
		param.put("managerunit", goodsParam.getManagerunit());
		List<Map> freqeuncylist = queryService.queryForList("listGoodsForCount", param, Map.class, 0,0);
		frequencyService.updateFrequency(freqeuncylist, "name");
		Page list = queryService.queryForPage("listGoods", param, Map.class, pageNo, pageSize);
		return list;
	}

	//条件列表查询物资现状-不带分页
	public List<Map> listGoods(GoodsParam goodsParam) throws Exception {
		Map<String, Object> param = new HashMap<>();
		if (goodsParam.getName() != null) {
			param.put("goodsName", "%"+goodsParam.getName()+"%");
		}
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		if (!StringUtils.isEmpty(goodsParam.getXZQY())){
			param.put("xzqy", goodsParam.getXZQY());
		}
		param.put("wareHouseId", goodsParam.getWareHouseId());
		param.put("managerunit", goodsParam.getManagerunit());
		List<Map> freqeuncylist = queryService.queryForList("listGoodsForCount", param, Map.class, 0,0);
		frequencyService.updateFrequency(freqeuncylist, "name");
		List<Map> list = queryService.queryForList("listGoods", param, Map.class, 0, 0);
		return list;
	}
	
	//条件列表查询物资现状，并按类型分组统计
	public List<Map> groupCategory(GoodsParam goodsParam) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("xzqy", goodsParam.getXZQY());
		List<Map> list = queryService.queryForList("groupCategory", param, Map.class, 0, 0);
		return list;
	}
	
	//条件列表查询物资现状
	public List<Map> listWarehouse(String xzqyId,Integer pageNo,Integer pageSize) throws Exception {
		Map<String, Object> param = new HashMap<>();
		if (!StringUtils.isEmpty(xzqyId)){
			param.put("xzqyId", xzqyId);
		}
		List<Map> list = queryService.queryForList("listWarehouse", param, Map.class, pageNo, pageSize);
		return list;
	}

	//条件列表查询物资现状
	public Page listWarehouseforpage(String xzqyId,String keyword, Integer pageNo, Integer pageSize) throws Exception {
		Map<String, Object> param = new HashMap<>();
		if (!StringUtils.isEmpty(xzqyId)){
			param.put("xzqyId", xzqyId);
		}
		if (!StringUtils.isEmpty(keyword)){
			param.put("keyword", "%"+keyword+"%");
		}

		return queryService.queryForPage("listWarehouse", param, Map.class, pageNo, pageSize);
	}
	
	//按照行政区域查询需要告警
	public List<Map> listAlarmWareHouse(String xzqyId,int isAlarm) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("xzqyId", xzqyId);
		String alarmFlag = isAlarm==0?"notAlarm":"alarm";
		param.put(alarmFlag, new byte[1]);
		List<Map> list = queryService.queryForList("listAlarmWareHouse", param, Map.class, 0, 0);
		return list;
	}
	
	//条件列表查询物资现状
	public List<Map> listAlarmGoods(GoodsParam goodsParam) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("xzqy", goodsParam.getXZQY());
		List<Map> list = queryService.queryForList("alarmByNumber", param, Map.class, 0, 0);
		return list;
	}
	
	//根据行政区域分组统计
	public List<Map> groupGoodsByXZQY(GoodsParam goodsParam) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("xzqy", goodsParam.getXZQY());
		List<Map> list = queryService.queryForList("groupXZQY", param, Map.class, 0, 0);
		return list;
	}
	
	//根据行政区域分组统计物资消耗
	public List<Map> consumeLog(GoodsParam goodsParam,Date start,Date end) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("xzqy", goodsParam.getXZQY());
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("start", start);
		param.put("end", end);
		param.put("type", GoodsParam.OUT);
		List<Map> list = queryService.queryForList("goodsLogCount", param, Map.class, 0, 0);
		return list;
	}
	
	//按名称分组同比分析
	@SuppressWarnings("rawtypes")
	public List<Map<String, Object>> year2yearGroupByName(GoodsParam goodsParam) throws Exception {
		List<Map<String, Object>> resultList = new ArrayList<>();
		Map<String, Object> comMap = new HashMap<>();
		
		Date now = new Date();
		Date start = new Date(TimeStateMonth.getMonthStart(now.getTime()));
		Date end = new Date(TimeStateMonth.getMonthStart(now.getTime(),1));
		Map<String, Object> param = new HashMap<>();
		param.put("wareHouseId", goodsParam.getWareHouseId());
		param.put("xzqy", goodsParam.getXZQY());
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("start", start);
		param.put("end", end);
		//今年的统计
		List<Map> currentList =  queryService.queryForList("groupName", param, Map.class, 0, 0);
		
		start.setYear(start.getYear()-1);
		end.setYear(end.getYear()-1);
		//去年的统计
		List<Map> lastYearList =  queryService.queryForList("groupName", param, Map.class, 0, 0);
		for (Map map : lastYearList) {
			Object o = map.get("name");
			if (o == null) {
				continue;
			}
			String name = o.toString();
			BigDecimal avg = (BigDecimal)map.get("avg");
			comMap.put(name, avg);
//			if (currentList.isEmpty()) {
//				Map<String, Object> node = new HashMap<>();
//				node.put("name", name);
//				node.put("increment", -1.0f);
//				resultList.add(node);
//				continue;
//			}
		}
		
		for (Map map : currentList) {
			Object o = map.get("name");
			if (o == null) {
				continue;
			}
			Map<String, Object> node = new HashMap<>();
			String name = o.toString();
			BigDecimal curAvg = (BigDecimal)map.get("avg");
			
			o = comMap.get(name);
			if (o == null) {
				node.put("name", name);
				node.put("increment", 1.0f);
				resultList.add(node);
				continue;
			}else{
				BigDecimal lastAvg = (BigDecimal)o;
				
				BigDecimal incre = curAvg.subtract(lastAvg);
				incre = incre.divide(lastAvg,4, BigDecimal.ROUND_HALF_UP).setScale(4, BigDecimal.ROUND_HALF_UP);
				node.put("name", name);
				node.put("increment", incre.doubleValue());
				resultList.add(node);
			}
		}
		return resultList;
	}
	
	//按名称分组同比分析
	@SuppressWarnings("rawtypes")
	public List<Map<String, Object>> year2yearConsumeGroupByName(GoodsParam goodsParam,Date start,Date end) throws Exception {
		List<Map<String, Object>> resultList = new ArrayList<>();
		Map<String, Object> comMap = new HashMap<>();
		
		Date now = new Date();
		//Date start = new Date(TimeStateYear.getYearStart(now.getTime()));
		//Date end = new Date(TimeStateYear.getYearStart(now.getTime(),1));
		Map<String, Object> param = new HashMap<>();
		param.put("xzqy", goodsParam.getXZQY());
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("start", start);
		param.put("end", end);
		//今年的统计
		List<Map> currentList =  queryService.queryForList("consumeCount", param, Map.class, 0, 0);
		
		start.setYear(start.getYear()-1);
		end.setYear(end.getYear()-1);
		//去年的统计
		List<Map> lastYearList =  queryService.queryForList("consumeCount", param, Map.class, 0, 0);
		for (Map map : lastYearList) {
			Object o = map.get("name");
			if (o == null) {
				continue;
			}
			String name = o.toString();
			BigDecimal avg = (BigDecimal)map.get("sum");
			comMap.put(name, avg);
		}
		
		for (Map map : currentList) {
			Object o = map.get("name");
			if (o == null) {
				continue;
			}
			Map<String, Object> node = new HashMap<>();
			String name = o.toString();
			BigDecimal curAvg = (BigDecimal)map.get("sum");
			
			o = comMap.get(name);
			if (o == null) {
				node.put("name", name);
				node.put("increment", 1.0f);
				resultList.add(node);
				continue;
			}else{
				BigDecimal lastAvg = (BigDecimal)o;
				
				BigDecimal incre = curAvg.subtract(lastAvg);
				if (incre.signum() < 0) {
					continue;
				}
				incre = incre.divide(lastAvg,4, BigDecimal.ROUND_HALF_UP).setScale(4, BigDecimal.ROUND_HALF_UP);
				node.put("name", name);
				node.put("increment", incre.doubleValue());
				resultList.add(node);
			}
		}
		return resultList;
	}
	
	
	//按月同比分析
	public Map<String, List<Map>> year2yearGroupByMonth(GoodsParam goodsParam) throws Exception {
		//去年按月统计
		Date now = new Date();
		Date start = new Date(TimeStateYear.getYearStart(now.getTime(), -1));
		Date end = new Date(TimeStateYear.getYearStart(now.getTime()));
		List<Map> lastYearList = groupByMonth(goodsParam, start, end);
		//今年按月统计
		start = end;
		end = new Date(TimeStateYear.getYearStart(now.getTime(), 1));
		List<Map> currentYearList = groupByMonth(goodsParam, start, end);
		
		Map<String, List<Map>> resultMap = new HashMap<>();
		resultMap.put("lastYearList", lastYearList);
		resultMap.put("currentYearList", currentYearList);
		return resultMap;
	}
	
	//分月统计物资历史
	@SuppressWarnings("rawtypes")
	public List<Map> groupByMonth(GoodsParam goodsParam,Date start,Date end) throws Exception {
		Map<String, Object> param = new HashMap<>();
		param.put("wareHouseId", goodsParam.getWareHouseId());
		param.put("xzqy", goodsParam.getXZQY());
		param.put("goodsName", goodsParam.getName());
		param.put("category", goodsParam.getCategory());
		param.put("min", goodsParam.getMinnumber());
		param.put("max", goodsParam.getMaxnumber());
		param.put("start", start);
		param.put("end", end);
		List<Map> list = queryService.queryForList("groupMonth", param, Map.class, 0, 0);
		return list;
	}

	//关注榜
	public List<Map> listStars() throws Exception {
		// TODO Auto-generated method stub
		List<Map> resultList = new ArrayList<>();
		
		List<Map> list = queryService.queryForList("listFrequency", new HashMap<>(), Map.class, 0, 0);
		Double sum = (double) 0;
		for (Map map : list) {
			sum += (Double)map.get("FREQUENCY");
		}
		
		for (Map map : list) {
			BigDecimal times = new BigDecimal((Double)map.get("FREQUENCY"));
			BigDecimal sumDecimal = new BigDecimal(sum);
			BigDecimal rate = times.divide(sumDecimal, BigDecimal.ROUND_HALF_UP);
			rate = times.divide(sumDecimal, 2, BigDecimal.ROUND_HALF_UP);
			map.put("name", map.get("GOODSNAME").toString());
			map.put("rate",rate);
			resultList.add(map);
		}
		
		return resultList;
	}

	public List<Map> materialReserves(GoodsParam goodsParam) {
		// TODO Auto-generated method stub

		return null;
	}


	/**
	 * 物资检索导出excel
	 * @param goodsParam
	 * @param response
	 * @throws Exception
	 */
	public void downloadlist(GoodsParam goodsParam, HttpServletResponse response) throws Exception {
		// 创建excel工作簿
		HSSFWorkbook wb = new HSSFWorkbook();

		//添加应急物资库数据
		List<Map> goodsList = listGoods(goodsParam);
		//格式化goodslist
		formateGoodsList(goodsList);
		ExcelUtil.addSheet(wb,"应急物资库",goodsList,keyswarehouse,columnNameswarehouse);

		//添加应急物资库数据
		List<Map> emergencyList = riskSourceService.getEmergencySubstance(null,goodsParam.getName(),goodsParam.getXZQY());
		formateEmergencyList(emergencyList);
		ExcelUtil.addSheet(wb,"风险源物资库",emergencyList,keysemergency,columnNamesemergency);

		response.setContentType("application/x-download");
		response.addHeader("Content-Disposition","attachment;filename=" + "goodslist.xls");

		wb.write(response.getOutputStream());
	}

	private static String[] keysemergency =
			{"name","address","function","number","numberUtil","typeNumber","companyName"};
	private static String[] columnNamesemergency =
			{"物资设备名称","贮存地点","用途","数量","计量单位","规格型号","风险源"};
	/**
	 * 格式化应急物资list，转成可以展现的格式
	 * @return
	 */
	public void formateEmergencyList(List<Map> emergencyList){
		return;

	}


	private static String[] keyswarehouse =
			{"EQUIPCODE","NAME","WEIZHI","LIFETIME","NUMBER","UNIT","ASSETSATTRIBUTE","UNITOFMATERIAL"};
	private static String[] columnNameswarehouse =
			{"物资设备编码","物资设备名称","存放位置","使用期限","数量","计量单位","资产状态","物资库"};

	/**
	 * 格式化goodslist，因为从数据库中查出来的数据要拼装成要展示的格式
	 * @param goodsList
	 */
	public void formateGoodsList(List<Map> goodsList){
		for (Map map:goodsList){
			//存放位置
			String STORAGELAYER = map.get("STORAGELAYER")==null?"":map.get("STORAGELAYER").toString();
			String STORAGEAREA = map.get("STORAGEAREA")==null?"":map.get("STORAGEAREA").toString();
			String STORAGEROW = map.get("STORAGEROW")==null?"":map.get("STORAGEROW").toString();
			String WEIZHI = STORAGEAREA+"区"+STORAGELAYER+"层"+STORAGEROW+"排";
			map.put("WEIZHI",WEIZHI);

			//使用期限
			Timestamp timestamp = (Timestamp)map.get("LIFETIME");
			map.put("LIFETIME",timestamp==null?"": DateUtils.sdf.format(new Date(timestamp.getTime())));

			//资产状态
			Object ASSETSATTRIBUTE = map.get("ASSETSATTRIBUTE");
			if (ASSETSATTRIBUTE == null){
				map.put("ASSETSATTRIBUTE","");
			}else if (ASSETSATTRIBUTE.equals("1.0")){
				map.put("ASSETSATTRIBUTE","在库");
			}else {
				map.put("ASSETSATTRIBUTE","");
			}
		}

	}
}
