package com.sucsoft.gzhbyjwz.bean.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

/**
 *
 * @author bin
 *
 * @param <T> 转换目标
 */
public class PoiInBean<T> {

	//文件流
	private MultipartFile fileIn;

	//本地文件
	private File fileIn2;

	//封装的对象s
	private Class<T> clazz;

	//封装后的缓存对象
	private List<T> resultCache;

	private Integer valueLength;
	private Workbook workbook = null;

	private int sheetNo = 1;

	public List<T> getResultCache() {
		return resultCache;
	}

	public void clearList(){
		this.resultCache.clear();
	}

	public PoiInBean(Integer size, MultipartFile fi, Class<T> clazz,int sheetNo) throws IOException {
		this.fileIn = fi;
		this.clazz = clazz;
		this.valueLength = size;
		this.sheetNo = sheetNo;
		resultCache = new ArrayList<>();
		workbook = getWorkbook(workbook);
	}

	public void setClassAndNo(Class<T> clazz,int sheetNo){
		this.clazz = clazz;
		this.sheetNo = sheetNo;
	}

	public PoiInBean(MultipartFile fi) throws IOException {
		this.fileIn = fi;
		workbook = getWorkbook(workbook);
		resultCache = new ArrayList<>();
	}

	public PoiInBean(File fi) throws IOException{
		this.fileIn2 = fi;
		try {
			//2003版本的excel
			workbook = new HSSFWorkbook(new FileInputStream(fileIn2));
		} catch (Exception e1) {
			try {
				//2007版本的excel
				workbook = new XSSFWorkbook(new FileInputStream(fileIn2));
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		resultCache = new ArrayList<>();


	}

	public PoiInBean<T> work(Integer dataRow, Integer headRow, Integer sheetNo) throws IllegalAccessException, InstantiationException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException {
		Sheet sheet = workbook.getSheetAt(sheetNo);
		Row rowHead = sheet.getRow(headRow == null ? 0 : headRow);

		//判断表头是否正确
//		if(rowHead.getPhysicalNumberOfCells()!=valueLength) {
//			return this;
//		}
		int totalRowNum = sheet.getLastRowNum();
		//获取表头名
		List<String> list = new ArrayList<>();
		for (int i = 0; i < rowHead.getPhysicalNumberOfCells(); i++) {
//			System.out.println(getStringValueFromCell(rowHead.getCell(i)));
			if (getStringValueFromCell(rowHead.getCell(i)).equals("object")){
				list.add("protectObject");
			}else if (StringUtils.isEmpty(getStringValueFromCell(rowHead.getCell(i)))){
				continue;
			}else {
				list.add(getStringValueFromCell(rowHead.getCell(i)));
			}

		}

		//获得所有数据
		for(int i = dataRow == null ? 2 : dataRow ; i <= totalRowNum ; i++)
		{
			//获得第i行对象
			Row row = sheet.getRow(i);
			if (row == null){
				continue;
			}

			// 获得获得第i行第j列的 String类型对象

//			int cellLength = row.getPhysicalNumberOfCells();
			int cellLength = row.getLastCellNum();

			T t = clazz.newInstance();
			//如果全部属性都是null，则不用插入改行数据。
			boolean nullflag = true;
			for (int j = 0; j < list.size(); j++) {
				//if (row.getCell(j) == null ){
				if (org.apache.commons.lang.StringUtils.isBlank(getStringValueFromCell(row.getCell(j)))){
					continue;
				}
				nullflag = false;

				String name = list.get(j).substring(0, 1).toUpperCase() + list.get(j).substring(1);

				Class<?> type = t.getClass().getDeclaredField(list.get(j).trim()).getType();
				if (type.equals(java.util.Date.class)) {
					// 如果是日期
					Method m = t.getClass().getDeclaredMethod("set" + name,java.util.Date.class);
					m.invoke(t, row.getCell(j).getDateCellValue());
				}else if(type.equals(java.lang.Double.class)){
					Method m = t.getClass().getDeclaredMethod("set" + name,java.lang.Double.class);
					m.invoke(t, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
				}else if(type.equals(java.lang.Integer.class)){
					Method m = t.getClass().getDeclaredMethod("set" + name,java.lang.Integer.class);
					m.invoke(t, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
				}else {
					// 其他都以String形式存储
					Method m = t.getClass().getDeclaredMethod("set" + name,java.lang.String.class);
					String value = getStringValueFromCell(row.getCell(j)).replaceAll(",","");
					m.invoke(t, value);
//					if(name.equals("Longitude")||name.equals("Latitude")){
//						m.invoke(t, String.valueOf(row.getCell(j).getNumericCellValue()));
//					}else{
//						m.invoke(t, getStringValueFromCell(row.getCell(j)));
//					}
				}
			}
			if (!nullflag){
				resultCache.add(t);
			}

		}
		return this;
	}

	/**
	 * 生成泛型类，存储在缓存对象中
	 * @return
	 */
	public PoiInBean<T> work(Integer dataRow,Integer headRow) throws Exception{
		return work(dataRow, headRow,sheetNo);
	}

	/**
	 * 处理一行的数据为map
	 * @param sheetNo
	 * @param columnNo
	 * @param rowNum
	 * @param defaultString
	 * @return
	 */
	public List<String> getRowData(int sheetNo, int columnNo,int rowNum,String defaultString){
		Sheet sheetAt = workbook.getSheetAt(sheetNo);
		Row row = sheetAt.getRow(rowNum);
		List<String> result = new ArrayList<>();
		for(int i = columnNo; i < row.getPhysicalNumberOfCells() ; i++){
			//获取该行的数据
			String s = StringUtils.isEmpty(getStringValueFromCell(row.getCell(i))) ? defaultString : getStringValueFromCell(row.getCell(i));

			result.add(s);
		}
		return result;
	}

	public Workbook getWorkbook(Workbook workbook) {
		try {
			//2003版本的excel
			workbook = new HSSFWorkbook(fileIn.getInputStream());
		} catch (Exception e1) {
			try {
				//2007版本的excel
				workbook = new XSSFWorkbook(fileIn.getInputStream());
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return workbook;
	}

	/**
	 * 移动文件
	 * @param targerPath
	 * @return
	 * @throws IOException
	 */
	public String removeFile(String targerPath) throws IOException{
		File file = new File(targerPath+"/"+System.currentTimeMillis()+fileIn.getOriginalFilename());
		if(!file.getParentFile().exists()){
			file.getParentFile().mkdirs();
		}
//		if(!file.exists()){
//			file.createNewFile();
//		}
		System.out.println(file.exists());
		copyFile(file.getAbsolutePath());
		return file.getAbsolutePath();
	}


	private  void  copyFile( String  newPath)  {
		InputStream inStream = null;
		FileOutputStream  fs = null;
		try  {
//           int  bytesum  =  0;
			int  byteread  =  0;  //文件存在时
				inStream  =  fileIn.getInputStream();  //读入原文件
				fs  =  new FileOutputStream(newPath);
				byte[]  buffer  =  new  byte[1444];
//               int  length;
				while  (  (byteread  =  inStream.read(buffer))  !=  -1)  {
//                   bytesum  +=  byteread;  //字节数  文件大小
//                   System.out.println(bytesum);
					fs.write(buffer,  0,  byteread);
				}
		}
		catch  (Exception  e)  {
			System.out.println("复制单个文件操作出错");
			e.printStackTrace();
		}finally {
			try {
				inStream.close();
				fs.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * 生成一个Map
	 * @param sheetNo 使用的工作簿
	 * @param startRowNo 数据开始行包含第一行的数据headline
	 * @param startColumnNo 开始的列树
	 * @param remarkRowNum 底部用于注释等用掉的行
	 * @return
	 */
	public List<Map<String, String>> workForMap(int sheetNo,int startRowNo,int startColumnNo,int remarkRowNum)
		throws Exception{
		Sheet sheet = workbook.getSheetAt(sheetNo);
		Row rowHead = sheet.getRow(startRowNo);
		int totalRowNum = sheet.getLastRowNum();
		//获取表头名
		List<String> list = new ArrayList<>();
		for (int i = 0; i < rowHead.getPhysicalNumberOfCells(); i++) {
			String stringValueFromCell = getStringValueFromCell(rowHead.getCell(i));
			if(!StringUtils.isEmpty(stringValueFromCell)){
				list.add(stringValueFromCell);
			}
		}
		List<Map<String, String>> result = new ArrayList<>();
		//从定义的初始开始位减去最后用于标记的标记行
		for(int i = startRowNo+1 ; i <= totalRowNum-remarkRowNum ; i++) {
			//获得第i行对象
			Row row = sheet.getRow(i);

			try {
				Map<String, String> resultItem = new HashMap<>();
				for (int j = 0; j < list.size(); j++) {
					String name = list.get(j);
					resultItem.put(name, getStringValueFromCell(row.getCell(startColumnNo+j)));
				}
				result.add(resultItem);
			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}
		return result;
	}

	/**
	 * 将一切格式以String格式录入
     * @param cell
     * @return
     */
    public static String getStringValueFromCell(Cell cell) {
        SimpleDateFormat sFormat = new SimpleDateFormat("MM/dd/yyyy");
        DecimalFormat decimalFormat = new DecimalFormat();
        String cellValue = "";
        if(cell == null) {
            return cellValue;
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_STRING) {
            cellValue = cell.getStringCellValue();
        }

        else if(cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
            if(HSSFDateUtil.isCellDateFormatted(cell)) {
                double d = cell.getNumericCellValue();
                Date date = HSSFDateUtil.getJavaDate(d);
                cellValue = sFormat.format(date);
            }
            else {
//            	System.out.println(cell.getNumericCellValue());
            	cellValue = decimalFormat.format(cell.getNumericCellValue());
//            	cellValue = String.valueOf(cell.getNumericCellValue());
            }
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_BLANK) {
            cellValue = "";
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
            cellValue = String.valueOf(cell.getBooleanCellValue());
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_ERROR) {
            cellValue = "";
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
            cellValue = cell.getCellFormula().toString();
        }
        return cellValue;
    }


}
