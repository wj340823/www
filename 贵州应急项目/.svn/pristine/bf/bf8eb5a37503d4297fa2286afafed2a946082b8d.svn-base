package com.sucsoft.gzhbyjwz.service.risksource;

import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

import com.cgs.dc.starter.model.GetOptions;
import com.sucsoft.gzhbyjwz.bean.common.AttachmentList;
import com.sucsoft.gzhbyjwz.bean.common.PrePlanUpdateList;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.service.XzqyService;
import com.sucsoft.gzhbyjwz.service.riskmanage.EnterprisePreplanService;
import org.apache.poi.ss.formula.functions.T;
import org.omg.PortableServer.LIFESPAN_POLICY_ID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.cgs.dc.starter.model.CountObject;
import com.sucsoft.gzhbyjwz.bean.common.PoiInBean;
import com.sucsoft.gzhbyjwz.bean.common.ResultBean;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

@Service
public class RiskImportService {

	@Value("${emergencyPlan.filePath}")
	private String filePath;

	@Autowired
	private BasicQueryService basicQueryService;

	@Autowired
	private XzqyService xzqyService;

	@Autowired
	private EnterprisePreplanService enterprisePreplanService;

	Logger logger = Logger.getLogger(this.getClass().getName());
	
	public String getUUID(){
		return UUID.randomUUID().toString().replaceAll("-", "");
	}

	public String getxzqyId(String xzqyId) throws Exception {
		if (xzqyId.length() >= 6){
			Map params = new HashMap();
			params.put("BM",xzqyId.trim().replaceAll(",",""));
			List<XZQY> xzqies = basicQueryService.queryForList("getXzqyByBM",params,XZQY.class,0,0);
			String xzqy = xzqies.get(0).getId();
			return xzqy;
		}else {
			return xzqyId.trim();
		}
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Transactional(rollbackFor=Exception.class)
	public ResultBean addExcel(HttpServletRequest request, MultipartFile file) {
		ResultBean r = new ResultBean(0,"导入成功");
		final int startindex = 1;
		
		try {
			//本地测试用
//			File file1 = new File("F:\\filein.xlsx");
//			PoiInBean poi = new PoiInBean(file1);
			if(file==null){
				return new ResultBean(1,"没有上传文件");
			}
			//风险源导入
			String companyId = null;
			PoiInBean poi = new PoiInBean(file);
			importExcel(poi);
			
		
		} catch (Exception e) {
			//出现异常手动回滚事务
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			r.setResult(1);
			r.setMsg("导入失败");
			e.printStackTrace();
		}
		return r;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Transactional(rollbackFor=Exception.class)
	public ResultBean addAttachmentList(File file) throws Exception {
		int sucNUm = 0;
		if(file==null){
			return new ResultBean(0,"不存在文件");
		}
		PoiInBean poi = new PoiInBean(file);
		poi.setClassAndNo(AttachmentList.class, startindex+0);
		poi.work(null, null,0);
		List<AttachmentList> list = poi.getResultCache();
		for(AttachmentList attachment : list){
			PlanAttachment planAttachment = new PlanAttachment();
			Map map = enterprisePreplanService.getBycompanyId(attachment.getCompanyId());
			if(map != null){
				planAttachment.setPlanId((String) map.get("ID"));
			}else {
				Map<String,Object> params = new HashMap<>();
				params.put("companyId",attachment.getCompanyId());
				List<EnterpriseInformation> infoList = basicQueryService.queryInfoList(params,0);
				if(infoList == null || infoList.size() == 0){
					continue;
				}
				EnterpriseInformation information = infoList.get(0);
				String planId = enterprisePreplanService.saveEnterprisePreplan(information);
				planAttachment.setPlanId(planId);
			}
			String path = filePath+File.separator+attachment.getPath();
			File file1 = new File(path);
			planAttachment.setUrl(attachment.getPath());
			planAttachment.setType(attachment.getType());
			planAttachment.setSize(String.valueOf(new FileInputStream(file1).available()));
			planAttachment.setTime(new Date());
			basicQueryService.save(planAttachment);
			sucNUm++;
		}
		ResultBean resultBean  = new ResultBean();
		resultBean.setResult(1);
		resultBean.setMsg("总数量："+list.size()+" "+"成功数量："+sucNUm+"");
		return resultBean;
	}



	final int startindex = 1;
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Transactional(rollbackFor=Exception.class)
	public ResultBean addExcel(File file) {
		ResultBean r = new ResultBean(0,"导入成功");


		try {
			//本地测试用
//			File file1 = new File("F:\\filein.xlsx");
//			PoiInBean poi = new PoiInBean(file1);
			if(file==null){
				return new ResultBean(1,"没有上传文件");
			}
			//风险源导入
			String companyId = null;
			PoiInBean poi = new PoiInBean(file);
			return importExcel(poi);

		} catch (Exception e) {
			//出现异常手动回滚事务
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			r.setResult(1);
			r.setMsg("导入失败");
			e.printStackTrace();
		}
		return r;
	}

	@Transactional(rollbackFor=Exception.class)
	public ResultBean importExcel(PoiInBean poi) throws Exception {

		//风险源导入
		String companyId = null;
		poi.setClassAndNo(EnterpriseInformation.class, startindex+0);
		poi.work(null, null);
		Map<String,Object> params = new HashMap<>();
		List<EnterpriseInformation> list = poi.getResultCache();
		for(EnterpriseInformation e:list){
			//params.put("companyName", e.getCompanyName());
			if (StringUtils.isEmpty(e.getCompanyId())){
				continue;
			}
			companyId = e.getCompanyId();
			params.put("companyId",e.getCompanyId());
			//查看数据库里是否已经存在该物资的说明
			CountObject countObject = basicQueryService.getQueryService().restQueryCount("findCompanyByName", params);
			if(countObject.getCount()==0){
				//xzqy取出来的是 excel输入的字符串 比如 1.贵阳市
//					String xzqy = e.getXzqyId();
//					System.out.println(xzqy);
//					xzqy = xzqy.substring(0, xzqy.lastIndexOf("."));
				if (StringUtils.isEmpty(e.getXzqyId())){
					return new ResultBean(1,"非法的xzqy字段");
				}
				String xzqy = getxzqyId(e.getXzqyId());

				e.setXzqyId(xzqy);
				XZQY parent = xzqyService.get2levelParent(xzqy);
				if (parent == null){
					return new ResultBean(1,"非法的xzqy字段");
				}
				e.setXzqyId2(xzqyService.get2levelParent(xzqy).getId());
				e.setCompanyId(companyId);
				e.setEntryTime(new Date());
				basicQueryService.save(e);

				//预案备案
				enterprisePreplanService.saveEnterprisePreplan(e);

			}else{
				return new ResultBean(1,"该公司名称已经存在");
			}

		}
		poi.clearList();

		if (companyId == null){
			return new ResultBean(1,"上传失败");
		}

		//风险物质导入
		poi.setClassAndNo(RiskMaterial.class, startindex+1);
		poi.work(null, null);
		List<RiskMaterial> listRiskM = poi.getResultCache();
		for(RiskMaterial p:listRiskM){
			p.setRiskMaterialId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

		//应急物资导入
		poi.setClassAndNo(EmergencySubstance.class, startindex+2);
		poi.work(null, null);
		List<EmergencySubstance> listES = poi.getResultCache();
		for(EmergencySubstance p:listES){
			p.setEmergencySubstanceId(getUUID());
			p.setCompanyId(companyId);
			p.setRiskSource((String) params.get("companyName"));
			basicQueryService.save(p);
		}
		poi.clearList();

		//应急人员导入
		poi.setClassAndNo(EmergencyCrew.class, startindex+3);
		poi.work(null, null);
		List<EmergencyCrew> listEC = poi.getResultCache();
		for(EmergencyCrew p:listEC){
			p.setEmergencyCrewId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

//			//应急小组导入
//			poi.setClassAndNo(EmergencyGroup.class, startindex+4);
//			poi.work(null, null);
//			List<EmergencyGroup> listEG = poi.getResultCache();
//			for(EmergencyGroup p:listEG){
//
//				p.setEmergencyGroupId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();

		//应急机构导入
		poi.setClassAndNo(EmergencyOrganization.class, startindex+4);
		poi.work(null, null);
		List<EmergencyOrganization> listEO = poi.getResultCache();
		for(EmergencyOrganization p:listEO){
			p.setEmergencyOrganizationId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

		//应急专家导入
		poi.setClassAndNo(EmergencySpecialist.class, startindex+5);
		poi.work(null, null);
		List<EmergencySpecialist> listESL = poi.getResultCache();
		for(EmergencySpecialist p:listESL){
			p.setEmergencySpecialistId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();


		//应急外援单位导入
		poi.setClassAndNo(ForeignAidUnit.class, startindex+6);
		poi.work(null, null);
		List<ForeignAidUnit> listFAU = poi.getResultCache();
		for(ForeignAidUnit p:listFAU){
			p.setForeignAidUnitId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

		//生产装置区
		poi.setClassAndNo(ProductionUnit.class, startindex+7);
		poi.work(null, null);
		List<ProductionUnit> listPUnit= poi.getResultCache();
		for(ProductionUnit p:listPUnit){
			p.setProductionUnitId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

		//环境保护目标
		poi.setClassAndNo(ProtectionObject.class, startindex+8);
		poi.work(null, null);
		List<ProtectionObject> listPObject= poi.getResultCache();
		for(ProtectionObject p:listPObject){
			p.setProtectionobjectsId(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

		//环境污染事故源
		poi.setClassAndNo(AccidentSource.class, startindex+9);
		poi.work(null, null);
		List<AccidentSource> listPSource= poi.getResultCache();
		for(AccidentSource p:listPSource){
			p.setAccidentsource_Id(getUUID());
			p.setCompanyId(companyId);
			basicQueryService.save(p);
		}
		poi.clearList();

//			//应急车辆导入
//			poi.setClassAndNo(EmergencyVehicle.class, startindex+3);
//			poi.work(null, null);
//			List<EmergencyVehicle> listEV = poi.getResultCache();
//			for(EmergencyVehicle p:listEV){
//				p.setEmergencyVehicleId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();

		//应急消防设备导入
//			poi.setClassAndNo(EmergencyFireDevice.class, startindex+4);
//			poi.work(null, null);
//			List<EmergencyFireDevice> listEFD = poi.getResultCache();
//			for(EmergencyFireDevice p:listEFD){
//				p.setEmergencyFireDeviceId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();

		//应急仪器设备导入
//			poi.setClassAndNo(EmergencyApparatus.class, startindex+5);
//			poi.work(null, null);
//			List<EmergencyApparatus> listEA = poi.getResultCache();
//			for(EmergencyApparatus p:listEA){
//				p.setEmergencyApparatusId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();

		//污染源处理设备/存储装置导入
//			poi.setClassAndNo(ProcessEquipment.class, startindex+6);
//			poi.work(null, null);
//			List<ProcessEquipment> listEP = poi.getResultCache();
//			for(ProcessEquipment p:listEP){
//				p.setProcessEquipmentId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();



//			//应急案例导入
//			poi.setClassAndNo(EmergencyCase.class, startindex+12);
//			poi.work(null, null);
//			List<EmergencyCase> listECase = poi.getResultCache();
//			for(EmergencyCase p:listECase){
//				p.setEmergencyCaseId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();
//
//			//应急预案导入
//			poi.setClassAndNo(EmergencyPlan.class, startindex+13);
//			poi.work(null, null);
//			List<EmergencyPlan> listEPlan= poi.getResultCache();
//			for(EmergencyPlan p:listEPlan){
//				p.setEmergencyPlanId(getUUID());
//				p.setCompanyId(companyId);
//				basicQueryService.save(p);
//			}
//			poi.clearList();






//			//风险物资说明导入
//			poi.setClassAndNo(RiskMaterialExplain.class, 3);
//			poi.work(null, null);
//			List<RiskMaterialExplain> listRiskME = poi.getResultCache();
//
//			for(RiskMaterialExplain p:listRiskME){
//				p.setRiskMaterialExplainId(getUUID());
//				params.put("explainName", p.getMateriaName());
//				//查看数据库里是否已经存在该物资的说明
//				CountObject countObject = basicQueryService.getQueryService().restQueryCount("findExplainByName", params);
//				if(countObject.getCount()==0){
//					basicQueryService.save(p);
//				}
//			}
//			poi.clearList();


		return new ResultBean(0,"导入成功");
	}


	/**
	 * sheetNo对应的对象类型
	 */
	private final static Map<Integer,Class> sheetNoMap = new HashMap();
	static{
		sheetNoMap.put(0,EnterpriseInformation.class);
		sheetNoMap.put(1,RiskMaterial.class);
		sheetNoMap.put(2,EmergencySubstance.class);
		sheetNoMap.put(3,EmergencyVehicle.class);
		sheetNoMap.put(4,EmergencyFireDevice.class);
		sheetNoMap.put(5,EmergencyApparatus.class);
		sheetNoMap.put(6,ProcessEquipment.class);
		sheetNoMap.put(7,EmergencyCrew.class);
		sheetNoMap.put(8,EmergencyGroup.class);
		sheetNoMap.put(9,EmergencyOrganization.class);
		sheetNoMap.put(10,EmergencySpecialist.class);
		sheetNoMap.put(11,ForeignAidUnit.class);
		sheetNoMap.put(12,EmergencyCase.class);
		sheetNoMap.put(13,EmergencyPlan.class);
		sheetNoMap.put(14,ProductionUnit.class);
		sheetNoMap.put(15,ProtectionObject.class);
		sheetNoMap.put(16,AccidentSource.class);
	}

	public boolean checkSheetNo(Integer sheetNo){
		if (sheetNo == null) {
			return false;
		}
		if (sheetNoMap.get(sheetNo) !=null){
			return true;
		}else {
			return false;
		}
	}

	@Transactional(rollbackFor = Exception.class)
	public ResultBean addExcel(int sheetNo,String companyId,MultipartFile file){

		return addSheetByName(sheetNo,sheetNoMap.get(sheetNo),companyId,file);
	}

	@Transactional(rollbackFor = Exception.class)
	public ResultBean addSheetByName(int sheetNo,Class clazz,String companyId,MultipartFile file){
		ResultBean r = new ResultBean(0,"导入成功");

		try{
			PoiInBean poi = new PoiInBean(file);

			//环境污染事故源
			poi.setClassAndNo(clazz, sheetNo);
			poi.work(null, null);
			List<Object> listPSource= poi.getResultCache();
			for(Object p:listPSource){
				if (p instanceof ProductionUnit){
					ProductionUnit p1 = (ProductionUnit) p;
					p1.setProductionUnitId(getUUID());
					p1.setCompanyId(companyId);
					basicQueryService.save(p);
				}
				if (p instanceof ProtectionObject){
					ProtectionObject p1 = (ProtectionObject) p;
					p1.setProtectionobjectsId(getUUID());
					p1.setCompanyId(companyId);
					basicQueryService.save(p);
				}
				if (p instanceof AccidentSource){
					AccidentSource p1 = (AccidentSource) p;
					p1.setAccidentsource_Id(getUUID());
					p1.setCompanyId(companyId);
					basicQueryService.save(p);
				}
				if (p instanceof ForeignAidUnit){
					ForeignAidUnit p1 = (ForeignAidUnit) p;
					p1.setForeignAidUnitId(getUUID());
					p1.setCompanyId(companyId);
					basicQueryService.save(p);
				}
			}
			poi.clearList();
		}catch (Exception e) {
			//出现异常手动回滚事务
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			r.setResult(1);
			r.setMsg("导入失败");
			e.printStackTrace();
		}
		return r;
	}


	@Transactional(rollbackFor=Exception.class)
	public ResultBean addExcels(HttpServletRequest request, MultipartFile[] files) {
		ResultBean resultBean = null;
		for(MultipartFile file :files){
			resultBean = addExcel(request,file);
			if (resultBean.getResult() == 1){
				return resultBean;
			}
		}
		return resultBean;
	}

	public ResultBean addExcelByName(HttpServletRequest request, MultipartFile file, String tableName) throws Exception {
		PoiInBean poi = new PoiInBean(file);

		Class clazz = this.getClass().getClassLoader().loadClass(tableName);
		poi.setClassAndNo(clazz, startindex);
		poi.work(null, 0,0);
		List<Object> listPObject= poi.getResultCache();
		for(Object p:listPObject){
			String setid = "setId";
			Method method = clazz.getMethod(setid,String.class);
			method.invoke(p,getUUID());
			basicQueryService.save(p);
		}
		poi.clearList();
		return new ResultBean(0,"导入成功");
	}

	/**
	 * 把companyid为fromid的公司关于EmergencyCrew的数据，拷贝到toid公司。
	 * @param fromId 源公司的companyid
	 * @param toId 目标公司的companyid
	 * @return
	 */
	@Transactional(rollbackFor=Exception.class)
	public Object copyDatafromCrew(String fromId,String toId) throws Exception {
		Map param = new HashMap();
		param.put("companyId",fromId);

		List<EmergencyCrew> fromData = basicQueryService.queryForList("getEmergencyCrew",param,EmergencyCrew.class,0,0);

		for (EmergencyCrew ec : fromData){
			EmergencyCrew ecto = new EmergencyCrew();

			Class clazz = ec.getClass();
			PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(clazz).getPropertyDescriptors();
			for (PropertyDescriptor descriptor:propertyDescriptors){
				Method readMethod = descriptor.getReadMethod();
				Object field = readMethod.invoke(ec);
				if ("class".equals(descriptor.getName())){
					continue;
				}
				Method writeMethod = descriptor.getWriteMethod();
				writeMethod.invoke(ecto,field);
			}


			Method writeCompany = clazz.getMethod("setCompanyId",String.class);
			writeCompany.invoke(ecto,toId);
			ecto.setEmergencyCrewId(getUUID());
			basicQueryService.save(ecto);
		}
		return  "success";
	}


    public void updatePrePlan(String path) throws Exception {

        File excel = new File(path);
        updatePrePlan(excel);
    }


    public void updatePrePlan(File file) throws Exception{
	    if(file == null){
	        return;
        }
        PoiInBean poi = new PoiInBean(file);
        poi.setClassAndNo(PrePlanUpdateList.class, startindex+0);
        poi.work(2, 1,0);
        List<PrePlanUpdateList> list = poi.getResultCache();
        if(list != null && list.size()>0){
            for(PrePlanUpdateList prePlan : list){
                String  companyId = prePlan.getCompanyId();
                Map<String,Object> params = new HashMap<>();
                params.put("companyId",companyId);
                EnterprisePreplan plan = null;
                List<EnterprisePreplan> plans = basicQueryService.queryForList("getPlanList",params,EnterprisePreplan.class,0,0);
                if(list != null || list.size()>0){
                    plan=plans.get(0);
                }
                SimpleDateFormat sf = new SimpleDateFormat("yyyy-mm-dd");
                Date recordTime =prePlan.getRecordTime();
                Date documentTime =sf.parse(new StringBuffer().append(prePlan.getDocumentTime()).append("-01-01").toString());
                Boolean flag = false;
                if(plan == null){
                    flag =true;
                    plan = new EnterprisePreplan();
                }
                plan.setLevel(prePlan.getLevel());
                plan.setDocumentYear(documentTime);
                plan.setRecordtime(recordTime);
                plan.setUnderSigned(prePlan.getUnderSignrd());
                if(flag){
                    plan.setId(UUID.randomUUID().toString());
                    plan.setCompanyId(prePlan.getCompanyId());
                    plan.setRecordStatus(1);
                    basicQueryService.save(plan);
                }else {
                    basicQueryService.update(plan);
                }
            }
        }
    }
}
