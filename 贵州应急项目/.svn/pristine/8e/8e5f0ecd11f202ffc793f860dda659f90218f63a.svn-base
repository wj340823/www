package com.sucsoft.gzhbyjwz.service;

import com.cgs.dc.PojoDataset;
import com.sucsoft.gzhbyjwz.bean.Excel_ya_transition;
import com.sucsoft.gzhbyjwz.bean.common.ModelBean;
import com.sucsoft.gzhbyjwz.bean.common.PoiInBean;
import com.sucsoft.gzhbyjwz.bean.common.ResultBean;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.service.riskmanage.EnterprisePreplanService;
import com.sucsoft.gzhbyjwz.util.ExcelExport;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
public class PreplanService {

    @Autowired
    private EnterprisePreplanService enterprisePreplanService;

    @Autowired
    private BasicQueryService basicQueryService;

    @Autowired
    private XzqyService xzqyService;

    @Autowired
    private PojoDataset ds;

    @Value("${fj.modelExcleupload.path}")
    private String UriPath;
    /**
     * @descript  初始数据
     *  新增之前从风险源、风险物质、风险要素中获取
     * @param companyId
     * @return
     */
    public Map<String, Object> queryEnterprisePreplan(String companyId) throws Exception {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("FXYS", enterprisePreplanService.queryRiskFactors(companyId));
        map.put("FXWZ", enterprisePreplanService.queryHjRiskSubstances(companyId));
        map.put("FXY", enterprisePreplanService.queryFxyInfos(companyId));
        return map;
    }

    /**
     * @descript 新增预案
     *  获取初始数据新建预案，并保留当前预案各表中（基础数据）
     * @param modelBean
     * @return
     */
    @Transactional(rollbackFor=Exception.class)
    public Map<String, String>  addNewEnterprisePreplan(ModelBean modelBean) {
        Map<String,String> data = new HashMap<>();
        try {
            //风险预案信息
            EnterprisePreplan enterprisePreplan = modelBean.getEnterprisePreplan();
            //风险源信息
            EnterpriseInformation_ya enterpriseInformation = modelBean.getEnterpriseInformation();
            //环境风险物质
            List<HjRiskSubstances_ya> hjRiskSubstances = modelBean.getHjRiskSubstances();
            //环境风险要素
            RiskFactors_ya riskFactors = modelBean.getRiskFactors();
            //产品信息
            List<ProductInfo_ya> productInfos = modelBean.getProductInfos();
            //排口信息
            List<RiskFactorsPkList_ya> pkinfos = modelBean.getPkinfos();
            //新增风险预案信息
            String id = UUID.randomUUID().toString().replace("-", "");
            enterprisePreplan.setId(id);
            enterprisePreplan.setCompanyId(enterpriseInformation.getCompanyId());
            enterprisePreplan.setRecordStatus(0);
            enterprisePreplan.setShzt("0");
            ds.save(enterprisePreplan, EnterprisePreplan.class.getName());
            //新增风险源信息
            enterpriseInformation.setYaid(id);
            ds.save(enterpriseInformation, EnterpriseInformation_ya.class.getName());
            for (HjRiskSubstances_ya hjRiskSubstance : hjRiskSubstances) {
                if(!StringUtils.isEmpty(hjRiskSubstance.getName()) || !StringUtils.isEmpty(hjRiskSubstance.getStorage())){
                    hjRiskSubstance.setHjrisksubstances_Id(UUID.randomUUID().toString().replace("-",""));
                    hjRiskSubstance.setYaid(id);
                    ds.save(hjRiskSubstance, HjRiskSubstances_ya.class.getName());
                }
            }
            riskFactors.setRiskfactors_Id(UUID.randomUUID().toString().replace("-",""));
            riskFactors.setYaid(id);
            ds.save(riskFactors, RiskFactors_ya.class.getName());
            for (ProductInfo_ya productInfo : productInfos) {
                if(!StringUtils.isEmpty(productInfo.getName()) || !StringUtils.isEmpty(productInfo.getNumber())){
                    productInfo.setId(UUID.randomUUID().toString().replace("-",""));
                    productInfo.setYaid(id);
                    ds.save(productInfo, ProductInfo_ya.class.getName());
                }
            }
            for (RiskFactorsPkList_ya pkinfo : pkinfos) {
                if(!StringUtils.isEmpty(pkinfo.getJd()) || !StringUtils.isEmpty(pkinfo.getWd()) || !StringUtils.isEmpty(pkinfo.getSnst()) || !StringUtils.isEmpty(pkinfo.getSnstjl())){
                    pkinfo.setUuid(UUID.randomUUID().toString().replace("-",""));
                    pkinfo.setRiskfactors_id("");
                    pkinfo.setYaid(id);
                    ds.save(pkinfo, RiskFactorsPkList_ya.class.getName());
                }
            }
            data.put("id", id);
        }catch (Exception e){
            e.printStackTrace();
        }
        return data;
    }

    /**
     * @descript  从基础数据中查询待审核预案信息
     * @param yaid
     * @return
     */
    @Transactional(rollbackFor=Exception.class)
    public Map<String, Object> queryNewEnterprisePreplan(String yaid, String companyId) throws Exception {
        Map<String, Object> map = new HashMap<String, Object>();
        //判断是否为空
        EnterpriseInformation_ya fxyinfos = enterprisePreplanService.queryFxyInfos2(yaid);
        //兼容未加入基础数据的待审核预案
        if(null == fxyinfos){//相关预案未加入基础数据

        }
        //3、查询基础数据
        EnterprisePreplan enterprisePreplan = basicQueryService.get(yaid, EnterprisePreplan.class);
        map.put("YAINFOS", enterprisePreplan);
        map.put("FXYS", enterprisePreplanService.queryRiskFactors2(yaid));
        map.put("FXWZ", enterprisePreplanService.queryHjRiskSubstances2(yaid));
        map.put("FXY", enterprisePreplanService.queryFxyInfos2(yaid));
        return map;
    }

    /**
     * 更新待审核预案
     * @param modelBean
     * @return
     */
    @Transactional(rollbackFor=Exception.class)
    public Map<String, String> updateNewEnterprisePreplan(ModelBean modelBean) {
        Map<String,String> data = new HashMap<>();
        try {
            //风险预案信息
            EnterprisePreplan enterprisePreplan = modelBean.getEnterprisePreplan();
            //风险源信息
            EnterpriseInformation_ya enterpriseInformation = modelBean.getEnterpriseInformation();
            //环境风险物质
            List<HjRiskSubstances_ya> hjRiskSubstances = modelBean.getHjRiskSubstances();
            //环境风险要素
            RiskFactors_ya riskFactors = modelBean.getRiskFactors();
            //产品信息
            List<ProductInfo_ya> productInfos = modelBean.getProductInfos();
            //排口信息
            List<RiskFactorsPkList_ya> pkinfos = modelBean.getPkinfos();
            String id = enterprisePreplan.getId();
            ds.update(enterprisePreplan, EnterprisePreplan.class.getName());

            if(!"".equals(id)){
                //更新
                ds.update(enterpriseInformation,EnterpriseInformation_ya.class.getName());
                //delete/update环境风险物质
                for (HjRiskSubstances_ya hjRiskSubstance : hjRiskSubstances) {
                    String hjrisksubstances_Id = hjRiskSubstance.getHjrisksubstances_Id();
                    if(null == hjRiskSubstance.getName() && null == hjRiskSubstance.getStorage()){
                        //delete
                        ds.remove(hjrisksubstances_Id, HjRiskSubstances_ya.class.getName());
                    }else{
                        if(StringUtils.isEmpty(hjrisksubstances_Id)){
                            if(!StringUtils.isEmpty(hjRiskSubstance.getName()) || !StringUtils.isEmpty(hjRiskSubstance.getStorage())){
                                hjRiskSubstance.setHjrisksubstances_Id(UUID.randomUUID().toString().replace("-",""));
                                hjRiskSubstance.setYaid(id);
                                ds.save(hjRiskSubstance,HjRiskSubstances_ya.class.getName());
                            }
                        }else{
                            //update
                            ds.update(hjRiskSubstance,HjRiskSubstances_ya.class.getName());
                        }
                    }
                }
                //udpate环境风险要素 riskFactors
                ds.update(riskFactors,RiskFactors_ya.class.getName());
                for (ProductInfo_ya productInfo : productInfos) {
                    String productInfoId = productInfo.getId();
                    if(null == productInfo.getName() && null == productInfo.getNumber()){
                        ds.remove(productInfoId,ProductInfo_ya.class);
                    }else{
                        if(StringUtils.isEmpty(productInfoId)){
                            if(!StringUtils.isEmpty(productInfo.getName()) || !StringUtils.isEmpty(productInfo.getNumber())){
                                productInfo.setId(UUID.randomUUID().toString().replace("-",""));
                                productInfo.setYaid(id);
                                ds.save(productInfo, ProductInfo_ya.class.getName());
                            }
                        }else{
                            ds.update(productInfo, ProductInfo_ya.class.getName());
                        }
                    }
                }
                for (RiskFactorsPkList_ya pkinfo : pkinfos) {
                    String uuid = pkinfo.getUuid();
                    if(null == pkinfo.getJd() && null == pkinfo.getWd() && null == pkinfo.getSnst() && null == pkinfo.getSnstjl()){
                        ds.remove(uuid, RiskFactorsPkList_ya.class.getName());
                    }else{
                        if(StringUtils.isEmpty(uuid)){
                            if(!StringUtils.isEmpty(pkinfo.getJd()) || !StringUtils.isEmpty(pkinfo.getWd()) || !StringUtils.isEmpty(pkinfo.getSnst()) || !StringUtils.isEmpty(pkinfo.getSnstjl())){
                                pkinfo.setUuid(UUID.randomUUID().toString().replace("-",""));
                                pkinfo.setYaid(id);
                                ds.save(pkinfo,RiskFactorsPkList_ya.class.getName());
                            }
                        } else{
                            ds.update(pkinfo,RiskFactorsPkList_ya.class.getName());
                        }
                    }
                }
            }
            data.put("id", id);
        }catch (Exception e){
            e.printStackTrace();
        }
        return data;
    }

    public List<Map<String, Object>> queryYabaqd(String xzqyId) throws Exception {
        Map param = new HashMap();
        param.put("qyid",xzqyId);

        List<Map<String, Object>> list = basicQueryService.queryForList("getBaseInfos",param, Map.class,0,0);
        for (Map<String, Object> map : list) {
            String iswxhxp = "0".equals(map.get("ISWXHXP")) ? "否" : "1".equals(map.get("ISWXHXP")) ? "是" : "";
            String iszjs = "0".equals(map.get("ISZJS")) ? "否" : "1".equals(map.get("ISZJS")) ? "是" : "";
            String iswxfw = "0".equals(map.get("ISWXFW")) ? "否" : "1".equals(map.get("ISWXFW")) ? "是" : "";
            String iswkk = "0".equals(map.get("ISWKK")) ? "否" : "1".equals(map.get("ISWKK")) ? "是" : "";
            String isydyhqt = "0".equals(map.get("ISYDYHQT")) ? "否" : "1".equals(map.get("ISYDYHQT")) ? "是" : "";
            String sfwyysy = "0".equals(map.get("SFWYYSY")) ? "否" : "1".equals(map.get("SFWYYSY")) ? "是" : "";
            String sfsyysy = "0".equals(map.get("SFSYYSY")) ? "否" : "1".equals(map.get("SFSYYSY")) ? "是" : "";
            String sfeyysy = "0".equals(map.get("SFEYYSY")) ? "否" : "1".equals(map.get("SFEYYSY")) ? "是" : "";
            map.put("ISWXHXP", iswxhxp);
            map.put("ISZJS", iszjs);
            map.put("ISWXFW", iswxfw);
            map.put("ISWKK", iswkk);
            map.put("ISYDYHQT", isydyhqt);
            map.put("SFWYYSY", sfwyysy);
            map.put("SFSYYSY", sfsyysy);
            map.put("SFEYYSY", sfeyysy);
            Map par = new HashMap();
            String yaid = StringUtils.isEmpty(map.get("YAID")) ? "" : map.get("YAID").toString();
            par.put("yaid", yaid);
            //排口信息
            List<Map<String, Object>> pk = basicQueryService.queryForList("getPkdcInfos",par, Map.class,0,0);
            //产品信息
            List<Map<String, Object>> cp = basicQueryService.queryForList("getCpdcInfos",par, Map.class,0,0);
            //风险物质
            List<Map<String, Object>> wz = basicQueryService.queryForList("getWzdcInfos",par, Map.class,0,0);
            map.put("PK", pk);
            map.put("CP", cp);
            map.put("WZ", wz);
        }
        return list;
    }

    public void exportedExcel(HttpServletResponse response, HttpServletRequest request, String xzqyId) throws Exception {
        String excelName = "贵州省企业环境应急预案备案清单" + ".xls";
        List<Map<String, Object>> list = queryYabaqd(xzqyId);
        String[] titles = {"序号", "市州", "区县", "企业名称", "备案编号", "备案单位", "备案时间", "风险评估等级", "行业代码", "行业名称", "企业地址", "企业中心经度", "企业中心纬度", "企业所属流域", "排污口经度", "排污口纬度", "受纳水体名称", "排污口到受纳水体距离（米）", "主要产品", "产品产量（吨）", "主要环境风险物质", "风险物质储存量（吨）", "是否涉危险化学品", "是否涉重金属", "是否涉危险废物", "是否涉尾矿库", "是否涉及有毒有害气体", "下游5公里是否有集中式饮用水源", "下游10公里是否有集中式饮用水源", "下游20公里是否有集中式饮用水源", "企业环保联系人", "企业环保人电话", "备注"};
        String[] vlaues = {"xh", "sz", "qx", "companyName", "beiAnNum", "unit", "time", "riskGrade", "industryCategoryCode", "industryCategoryName", "address", "longitude", "latitude", "ssly", "jd", "wd", "snst", "snstjl", "name", "number", "name", "storage", "isWxhxp", "isZjs", "isWxfw", "isWkk", "isYdyhqt", "sfwyysy", "sfsyysy", "sfeyysy", "custodian", "custodianTelephone", "bz"};
        ExcelExport ee = new ExcelExport();
        ee.exprotExcelsYabaqd(list, titles, vlaues);
        ee.outExcel(response, request, excelName);
    }

    @Transactional(rollbackFor = Exception.class)
    public ResultBean importExcel(MultipartFile file) {

        ResultBean r = new ResultBean(0, "导入成功");

        try {
            //本地测试用
//			File file1 = new File("F:\\filein.xlsx");
//			PoiInBean poi = new PoiInBean(file1);
            if (file == null) {
                return new ResultBean(1, "没有上传文件");
            }
            ModelBean mb = new ModelBean();
            //导入
            return yaImport(mb, file);

        } catch (Exception e) {
            //出现异常手动回滚事务
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            r.setResult(1);
            r.setMsg("导入失败");
            e.printStackTrace();
        }
        return r;
    }

    @Transactional(rollbackFor = Exception.class)
    public ResultBean yaImport(ModelBean mb, MultipartFile file) throws Exception {
        Workbook workbook = new HSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0);
        Row rowHead = sheet.getRow(3);
        int totalRowNum = sheet.getLastRowNum();
        //获取表头名
        List<String> list = new ArrayList<>();
        for (int i = 0; i < rowHead.getPhysicalNumberOfCells(); i++) {
            if (StringUtils.isEmpty(getStringValueFromCell(rowHead.getCell(i)))){
                continue;
            }else {
                list.add(getStringValueFromCell(rowHead.getCell(i)));
            }
        }
        int size = list.size();
        //数据列
        Row baseDataRow = sheet.getRow(4);
        String str1 = getStringValueFromCell(baseDataRow.getCell(1)).replaceAll(",", "");
        if(StringUtils.isEmpty(str1)){
            return new ResultBean(-1, "导入失败");
        }
        boolean xz = true;
        boolean some = true;
        mb = new ModelBean();
        List<HjRiskSubstances_ya> hrs = new ArrayList<HjRiskSubstances_ya>();
        List<ProductInfo_ya> pi = new ArrayList<ProductInfo_ya>();
        List<RiskFactorsPkList_ya> rfp = new ArrayList<RiskFactorsPkList_ya>();
        for(int i = 4; i <= totalRowNum; i++){
            EnterpriseInformation_ya e = new EnterpriseInformation_ya();
            HjRiskSubstances_ya h = new HjRiskSubstances_ya();
            RiskFactors_ya r = new RiskFactors_ya();
            ProductInfo_ya f = new ProductInfo_ya();
            RiskFactorsPkList_ya k = new RiskFactorsPkList_ya();
            Row row = sheet.getRow(i);
            if(i > 4){
                String str2 = getStringValueFromCell(row.getCell(1)).replaceAll(",", "");
                //是否还是同一个风险预案
                some = getSome(str1, str2);
            }
            if(!some){
                xz = true;
                //先提交
                mb.setProductInfos(pi);
                mb.setHjRiskSubstances(hrs);
                mb.setPkinfos(rfp);
                //新增
                addNewEnterprisePreplan(mb);
                //初始化
                mb = new ModelBean();
                hrs = new ArrayList<HjRiskSubstances_ya>();
                pi = new ArrayList<ProductInfo_ya>();
                rfp = new ArrayList<RiskFactorsPkList_ya>();
            }
            int lastCellNum = row.getLastCellNum();
            for(int j = 1; j < size; j++){
                String name = list.get(j).substring(0, 1).toUpperCase() + list.get(j).substring(1);
                if(xz){
                    if(j >= 29 || (j >= 5 && j < 11) || j == 1){//风险源
                        Class<?> type = e.getClass().getDeclaredField(list.get(j).trim()).getType();
                        Method m = e.getClass().getDeclaredMethod("set" + name, type);
                        if (type.equals(java.util.Date.class)) {
                            m.invoke(e, row.getCell(j).getDateCellValue());
                        }else if(type.equals(java.lang.Double.class)){
                            m.invoke(e, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                        }else if(type.equals(java.lang.Integer.class)){
                            m.invoke(e, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                        }else {
                            m.invoke(e, getStringValueFromCell(row.getCell(j)).replaceAll(",",""));
                        }
                    }

                    if((j >= 2 && j < 5) || (j >= 20 && j < 28) || j == 11){//风险要素
                        Class<?> type = r.getClass().getDeclaredField(list.get(j).trim()).getType();
                        Method m = r.getClass().getDeclaredMethod("set" + name, type);
                        if (type.equals(java.util.Date.class)) {
                            DataFormatter formatter = new DataFormatter(); //creating formatter using the default locale
                            Cell cell = row.getCell(j);
                            String parkName = formatter.formatCellValue(cell);
                            Date parse = new Date();
                            if(!StringUtils.isEmpty(parkName)){
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                parse = sdf.parse(parkName);
                            }
                            m.invoke(r, parse);//row.getCell(j).getDateCellValue()
                        }else if(type.equals(java.lang.Double.class)){
                            m.invoke(r, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                        }else if(type.equals(java.lang.Integer.class)){
                            m.invoke(r, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                        }else {
                            m.invoke(r, getStringValueFromCell(row.getCell(j)).replaceAll(",",""));
                        }
                    }
                }

                if(j >= 18 && j < 20){//风险物质
                    Class<?> type = h.getClass().getDeclaredField(list.get(j).trim()).getType();
                    Method m = h.getClass().getDeclaredMethod("set" + name, type);
                    if (type.equals(java.util.Date.class)) {
                        m.invoke(h, row.getCell(j).getDateCellValue());
                    }else if(type.equals(java.lang.Double.class)){
                        m.invoke(h, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else if(type.equals(java.lang.Integer.class)){
                        m.invoke(h, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else {
                        m.invoke(h, getStringValueFromCell(row.getCell(j)).replaceAll(",",""));
                    }
                }

                if((j >= 16 && j < 18)){//产品
                    Class<?> type = f.getClass().getDeclaredField(list.get(j).trim()).getType();
                    Method m = f.getClass().getDeclaredMethod("set" + name, type);
                    if (type.equals(java.util.Date.class)) {
                        m.invoke(f, row.getCell(j).getDateCellValue());
                    }else if(type.equals(java.lang.Double.class)){
                        m.invoke(f, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else if(type.equals(java.lang.Integer.class)){
                        m.invoke(f, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else {
                        m.invoke(f, getStringValueFromCell(row.getCell(j)).replaceAll(",",""));
                    }
                }
                if(j >= 12 && j < 16){//排口信息
                    Class<?> type = k.getClass().getDeclaredField(list.get(j).trim()).getType();
                    Method m = k.getClass().getDeclaredMethod("set" + name, type);
                    if (type.equals(java.util.Date.class)) {
                        m.invoke(k, row.getCell(j).getDateCellValue());
                    }else if(type.equals(java.lang.Double.class)){
                        m.invoke(k, Double.parseDouble(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else if(type.equals(java.lang.Integer.class)){
                        m.invoke(k, Integer.parseInt(getStringValueFromCell(row.getCell(j)).replaceAll(",", "")));
                    }else {
                        m.invoke(k, getStringValueFromCell(row.getCell(j)).replaceAll(",",""));
                    }
                }
            }
            if(xz){
                Map<String, Object> param = new HashMap<String, Object>();
                param.put("name", e.getCompanyName().trim());
                List<Map> enter = basicQueryService.queryForList("getFxyByName", param, Map.class, 0, 0);
                if(!enter.isEmpty()){
                    for (Map<String, Object> mp: enter) {
                        e.setCompanyId(mp.get("COMPANYID").toString());
                    }
                }else{
                    return new ResultBean(-1, "导入失败");
                }
                mb.setEnterpriseInformation(e);
                EnterprisePreplan ep = new EnterprisePreplan();
                ep.setBabh(r.getBeiAnNum());
                ep.setBadw(r.getUnit());
                ep.setRecordtime(r.getTime());
                ep.setLevel("一般".equals(e.getRiskGrade()) ? 1 : "重大".equals(e.getRiskGrade()) ? 2 : "特大".equals(e.getRiskGrade()) ? 3 : null);
                mb.setRiskFactors(r);
                mb.setEnterprisePreplan(ep);
                xz = false;
            }
            hrs.add(h);
            pi.add(f);
            rfp.add(k);

            if(i == totalRowNum){
                mb.setProductInfos(pi);
                mb.setHjRiskSubstances(hrs);
                mb.setPkinfos(rfp);
                //新增
                addNewEnterprisePreplan(mb);
            }
        }

        return new ResultBean(0, "导入成功");
    }

    /**
     * 将一切格式以String格式录入
     * @param cell
     * @return
     */
    public static String getStringValueFromCell(Cell cell) {
        SimpleDateFormat sFormat = new SimpleDateFormat("MM/dd/yyyy");
        DecimalFormat decimalFormat = new DecimalFormat();
        String cellValue = "";
        if(cell == null) {
            return cellValue;
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_STRING) {
            cellValue = cell.getStringCellValue();
        }

        else if(cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
            if(HSSFDateUtil.isCellDateFormatted(cell)) {
                double d = cell.getNumericCellValue();
                Date date = HSSFDateUtil.getJavaDate(d);
                cellValue = sFormat.format(date);
            }
            else {
//            	System.out.println(cell.getNumericCellValue());
                cellValue = decimalFormat.format(cell.getNumericCellValue());
//            	cellValue = String.valueOf(cell.getNumericCellValue());
            }
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_BLANK) {
            cellValue = "";
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
            cellValue = String.valueOf(cell.getBooleanCellValue());
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_ERROR) {
            cellValue = "";
        }
        else if(cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
            cellValue = cell.getCellFormula().toString();
        }
        return cellValue;
    }

    public boolean getSome(String str1, String str2){
        if(str1.equals(str2) || StringUtils.isEmpty(str2)){
            return true;
        }else {
            return false;
        }
    }

    public void downModel(HttpServletResponse response) throws IOException {
        String url = "预案清单导入模板.xls";
        FileInputStream fis = null;
        try {
            //fis = new FileInputStream(Paths.get(fjPath, url).toFile());
            fis = new FileInputStream(Paths.get(UriPath, url).toFile());
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition", "attachment;filename=" + new String(url.getBytes("UTF-8"),"ISO8859-1"));//StringUtils.toUtf8String(url)
            FileCopyUtils.copy(fis, response.getOutputStream());
        } finally {
            fis.close();
        }
    }
}
