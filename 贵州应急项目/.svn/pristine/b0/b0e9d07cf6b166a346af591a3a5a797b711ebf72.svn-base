package com.sucsoft.gzhbyjwz.util;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

public class ExcelExport {
	HSSFWorkbook book = null;
	HSSFCellStyle titleStyle = null;

	/**
	 * 创建并初始化
	 */
	public ExcelExport(){
		this.book = new HSSFWorkbook();
		titleStyle = settitleStyle();
	}

	/**
	 * 设置标题样式
	 *
	 * @return*/
	public HSSFCellStyle settitleStyle() {
		titleStyle = book.createCellStyle();
		titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		titleStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		HSSFFont ztFont = book.createFont();
		ztFont.setItalic(false); // 设置字体为斜体字
		ztFont.setFontHeightInPoints((short) 16); // 将字体大小设置为18px
		ztFont.setFontName("宋体"); // 将“宋体”字体应用到当前单元格上
		ztFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); // 加粗
		titleStyle.setFont(ztFont);
		return titleStyle;
	}

	public String filename() {
		return new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	}

	/**
	 * 文件输出
	 * @param request 
	 * 
	 * */
	public void export(HSSFWorkbook book, HttpServletResponse response,
			HttpServletRequest request, String filename) throws IOException {

		try {
			String userAgent = request.getHeader("User-Agent");
//			System.out.println(userAgent.toLowerCase());
//			if(userAgent != null && userAgent.toLowerCase().indexOf("firefox") > 0)
//            {
//				filename = "=?UTF-8?B?" + (new String(Base64.encodeBase64(filename.getBytes("UTF-8")))) + "?=";    
//            }
			if (userAgent.contains("MSIE") || userAgent.contains("Trident")) { // 是否是ajax請求
				filename = URLEncoder.encode(filename, "UTF-8");
			} else {
				filename = new String(filename.getBytes("UTF-8"), "ISO-8859-1");
			}
			response.setContentType("application/octet-stream;charset=utf-8");
			response.setHeader("Content-disposition", String.format("attachment;filename=\"%s\"",filename));
			response.setCharacterEncoding("UTF-8");
			OutputStream out = response.getOutputStream();
			book.write(out);
			out.flush();
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void exportExcel2(List<?> list, HttpServletResponse response,
			String title[], String valuename[], String name)
			throws NoSuchMethodException, SecurityException,
			IllegalAccessException, IllegalArgumentException,
			InvocationTargetException, IOException {

//		String filename = URLEncoder.encode(this.filename() + name, "utf-8");
		HSSFWorkbook book = new HSSFWorkbook();// 创建工作薄
		HSSFSheet sheet = book.createSheet();// 创建工作表
		HSSFRow row = sheet.createRow(0);// 创建第一行
		HSSFCell cell = null;

		this.settitleStyle();// 标题样式
		// 设置标题
		for (int i = 0; i < title.length; i++) {
			cell = row.createCell(i);
			cell.setCellStyle(titleStyle);
			cell.setCellValue(title[i]);
		}

		// 数据插入
		int rownum = 1;
		Integer id;
		String value = null;
		if (list != null) {
			Object o = list.get(0);
			Class c = o.getClass(); // 获取传过来的实体类
			for (int j = 0; j < list.size(); j++) {
				Object entity = list.get(j);
				row = sheet.createRow(rownum);// 创建第 rownum行
				for (int i = 0; i < valuename.length; i++) {
					cell = row.createCell(i);
					Method method = c.getMethod("get" + valuename[i]); // 获取每个标题对应的
																		// get方法
					if (valuename[i].equals("ID")) // 返回类型为int时
					{
						id = (Integer) method.invoke(entity); // 获取方法getID()的返回值
						cell.setCellValue(id + "");
					} else {
						value = (String) method.invoke(entity); // 获取方法不是getID()的返回值，都为String类型
						cell.setCellValue(value == null ? "" : value + "");
					}
				}
				rownum++;
			}
		}
		//this.export(book, response, filename);
	}
	
	/**
	 * 数据 批量导出模板
	 *
	 * @param title
	 *            [] 标题行数组
	 * @param valuename
	 *            [] 标题行对应的变
	 * 
	 * 
	 * 
	 * @throws SecurityException
	 * @throws NoSuchMethodException
	 * @throws InvocationTargetException
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 * @throws IOException
	 **/
	@SuppressWarnings("unchecked")
	public void exportExcels(List<?> list, String[] title, String[] valuename, String sheetName, int sheetNum)
			throws NoSuchMethodException, SecurityException,
			IllegalAccessException, IllegalArgumentException,
			InvocationTargetException, IOException {

		HSSFSheet sheet = book.createSheet();// 创建工作表
		book.setSheetName(sheetNum, sheetName);
		HSSFRow row = sheet.createRow(0);// 创建第一行
		HSSFCell cell = null;

		// 设置标题头
		cell = row.createCell(0);
		cell.setCellStyle(titleStyle);
//		sheet.autoSizeColumn(0);//自动设宽
		cell.setCellValue(sheetName);
		sheet.addMergedRegion(new CellRangeAddress(0,0,0,title.length-1));//横向：合并第一行的第2列到第4列
		/**
		 * 参数一 第一个单元格所在行
		            参数二 第二个单元格所在行
		            参数三 第一个单元格所在列
		            参数死 第二个单元格所在列
		 */
		this.settitleStyle();// 标题样式
		HSSFRow rows = sheet.createRow(1);// 创建第一行
		// 设置标题
		for (int i = 0; i < title.length; i++) {
			cell = rows.createCell(i);
			cell.setCellStyle(titleStyle);
			cell.setCellValue(title[i]);
			sheet.autoSizeColumn(i);
		}

		// 数据插入
		int rownum = 2;
		Integer id;
		String value = null;
		if (list != null && !list.isEmpty()) {
			Object o = list.get(0);
			Class c = o.getClass(); // 获取传过来的实体类
			for (int j = 0; j < list.size(); j++) {
				Object entity = list.get(j);
				row = sheet.createRow(rownum);// 创建第 rownum行
				for (int i = 0; i < valuename.length; i++) {
					cell = row.createCell(i);
					Method method = c.getMethod("get" + captureName(valuename[i])); // 获取每个标题对应的
					// get方法
					if (valuename[i].equals("ID")) // 返回类型为int时
					{
						id = (Integer) method.invoke(entity); // 获取方法getID()的返回值
						cell.setCellValue(id + "");
					} else {
						value = (String) method.invoke(entity); // 获取方法不是getID()的返回值，都为String类型
						cell.setCellValue(value == null ? "" : value + "");
						sheet.autoSizeColumn(i);
					}
				}
				rownum++;
			}
		}
	}
	
	public void outExcel(HttpServletResponse response,
			HttpServletRequest request, String excelName) throws IOException{
		
		this.export(book, response, request, excelName);
	}

	/**
	 * 将字符串的首字母转大写
	 * @param str 需要转换的字符串
	 * @return
	 */
	private static String captureName(String str) {
		// 进行字母的ascii编码前移，效率要高于截取字符串进行转换的操作
		char[] cs=str.toCharArray();
		cs[0]-=32;
		return String.valueOf(cs);
	}
	
}
