package com.sucsoft.gzhbyjwz.controller;

import com.cgs.authox.starter.authenticate.BasicAuthenticationProvider;
import com.cgs.authox.starter.domain.BasicUser;
import com.cgs.cas.core.utils.JwtUtils;
import com.sucsoft.gzhbyjwz.service.user.UserService;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.Map;



@Controller
public class LoginautoController {

    @Autowired
    private UserService userService;


    //单点登录
    @RequestMapping(value = "/validate/login.do", method = RequestMethod.GET)
    @ApiOperation(value = "单点登入", notes = "单点登入")
    public String login(@RequestParam(value = "access_token") String access_token) throws Exception{
        try {
            Map userMap = JwtUtils.parseAndValidate(access_token,new SecretKeySpec(Base64.getDecoder().decode("GUIZHOUOSSLOGIN"),JwtUtils.getSignatureAlgorithm().getJcaName())).details;
            //通过token拿到用户信息
            if (userMap != null && userMap.get("ACCOUNT") != null) {
                String accountStr = (String) userMap.get("ACCOUNT");
                BasicUser user = userService.getBasicUser(accountStr);
                if (StringUtils.isNotBlank(user.getAccount())) {
                    //将用户通过security验证
                    BasicAuthenticationProvider.BasicUserDetails details = new BasicAuthenticationProvider.BasicUserDetails(user);
                    SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(details, "password", details.getAuthorities()));
                    return "loginauto";
                }
                return "login";
            }
            return "login";
        } catch (Exception e) {
            e.printStackTrace();
            return "login";
        }
    }

    @RequestMapping(value = "/validate/viewLogin", method = RequestMethod.GET)
    @ApiOperation(value = "后台登陆", notes = "后台登陆")
    public String login() {
        try {
            BasicUser user = userService.getBasicUser("super","123");
            if (StringUtils.isNotBlank(user.getAccount())) {
                //将用户通过security验证
                BasicAuthenticationProvider.BasicUserDetails details = new BasicAuthenticationProvider.BasicUserDetails(user);
                SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(details, "password", details.getAuthorities()));
                return "loginauto";
            }
            return "login";
        } catch (Exception e) {
            e.printStackTrace();
            return "login";
        }
    }
}
