package com.sucsoft.gzhbyjwz.service;

import com.sucsoft.gzhbyjwz.bean.common.PoiInBean;
import com.sucsoft.gzhbyjwz.bean.common.ResultBean;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.util.ExcelExport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

@Service
public class YjInfosService {

    @Autowired
    private BasicQueryService basicQueryService;

    final int startindex = 1;

    @Transactional(rollbackFor = Exception.class)
    public ResultBean addYjzjExcel(HttpServletRequest request, String companyId, MultipartFile file) {
        if (companyId == null) {
            return new ResultBean(1, "上传失败");
        }

        ResultBean r = new ResultBean(0, "导入成功");

        try {
            //本地测试用
//			File file1 = new File("F:\\filein.xlsx");
//			PoiInBean poi = new PoiInBean(file1);
            if (file == null) {
                return new ResultBean(1, "没有上传文件");
            }
            //风险源导入
            PoiInBean poi = new PoiInBean(file);
            importExcel(companyId, poi);


        } catch (Exception e) {
            //出现异常手动回滚事务
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            r.setResult(1);
            r.setMsg("导入失败");
            e.printStackTrace();
        }
        return r;
    }

    @Transactional(rollbackFor = Exception.class)
    public ResultBean importExcel(String companyId, PoiInBean poi) throws Exception {

        //应急物资导入
        poi.setClassAndNo(EmergencySubstance.class, startindex + 0);//sheet
        poi.work(null, null);
        List<EmergencySubstance> listES = poi.getResultCache();//封装的缓存对象List<T>

        //向缓存对象填充数据
        for (EmergencySubstance p : listES) {
            p.setEmergencySubstanceId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急专家导入
        poi.setClassAndNo(EmergencySpecialist.class, startindex + 1);
        poi.work(null, null);
        List<EmergencySpecialist> listZj = poi.getResultCache();

        for (EmergencySpecialist p : listZj) {
            p.setEmergencySpecialistId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急指挥通讯录
        poi.setClassAndNo(EmergencyCrew.class, startindex + 2);
        poi.work(null, null);
        List<EmergencyCrew> listEC = poi.getResultCache();

        for (EmergencyCrew p : listEC) {
            p.setEmergencyCrewId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急外部联络人员
        poi.setClassAndNo(ForeignAidUnit.class, startindex + 3);
        poi.work(null, null);
        List<ForeignAidUnit> listFA = poi.getResultCache();

        for (ForeignAidUnit p : listFA) {
            p.setForeignAidUnitId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //环境风险物质
        poi.setClassAndNo(HjRiskSubstances.class, startindex + 4);
        poi.work(null, null);
        List<HjRiskSubstances> listHS = poi.getResultCache();

        for (HjRiskSubstances p : listHS) {
            p.setHjrisksubstances_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //环境风险单元
        poi.setClassAndNo(RiskSourceUnit.class, startindex + 5);
        poi.work(null, null);
        List<RiskSourceUnit> listRS = poi.getResultCache();

        for (RiskSourceUnit p : listRS) {
            p.setId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //生产装置区
        poi.setClassAndNo(ProductionUnit.class, startindex + 6);
        poi.work(null, null);
        List<ProductionUnit> listPU = poi.getResultCache();

        for (ProductionUnit p : listPU) {
            p.setProductionUnitId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();
        //环境污染事故源
        poi.setClassAndNo(AccidentSource.class, startindex + 7);
        poi.work(null, null);
        List<AccidentSource> listAS = poi.getResultCache();

        for (AccidentSource p : listAS) {
            p.setAccidentsource_Id(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //突发环境事件情景分析
        poi.setClassAndNo(QyScenarioAnalysis.class, startindex + 8);
        poi.work(null, null);
        List<QyScenarioAnalysis> listQA = poi.getResultCache();

        for (QyScenarioAnalysis p : listQA) {
            p.setQyscenarioanalysis_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //环境风险受体
        poi.setClassAndNo(RiskReceptor.class, startindex + 9);
        poi.work(null, null);
        List<RiskReceptor> listRR = poi.getResultCache();

        for (RiskReceptor p : listRR) {
            if ("水环境保护目标".equals(p.getReceptorType())) {
                p.setReceptorType("1");
            } else if ("气环境保护目标".equals(p.getReceptorType())) {
                p.setReceptorType("2");
            }
            p.setRiskreceptor_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //生产工艺
        poi.setClassAndNo(ProductionProcess.class, startindex + 10);
        poi.work(null, null);
        List<ProductionProcess> listPP = poi.getResultCache();

        for (ProductionProcess p : listPP) {
            p.setProductionProcess_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();
        return new ResultBean(0, "导入成功");
    }

    public String getUUID() {
        return UUID.randomUUID().toString().replaceAll("-", "");
    }

    @Transactional(rollbackFor = Exception.class)
    public void exportedExcel(String companyId, HttpServletResponse response, HttpServletRequest request) throws Exception {

        EnterpriseInformation e = basicQueryService.get(companyId, EnterpriseInformation.class);

        String excelName = e.getCompanyName() + ".xls";
        ExcelExport ee = new ExcelExport();
        //生产装置
        excelPort(ee, companyId, response, request, excelName);
    }

    public void excelPort(ExcelExport ee, String companyId, HttpServletResponse response, HttpServletRequest request, String excelName) throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("companyId", companyId);
        //环境风险物质
        List<HjRiskSubstances> fxwz = basicQueryService.queryForList("getHjRiskSubstancesForWorldExport", params, HjRiskSubstances.class, 0, 0);
        ee.exportExcels(fxwz, HjRiskSubstanceslistTitles, HjRiskSubstanceslistproperties, "环境风险物质", 0);
        //环境风险单元
        List<RiskSourceUnit> fxdy = basicQueryService.queryForList("getRiskSourceUnitList", params, RiskSourceUnit.class, 0, 0);
        ee.exportExcels(fxdy, RiskSourceUnitlistTitles, RiskSourceUnitlistproperties, "环境风险单元", 1);
        //生产工艺
        List<ProductionProcess> scgy = basicQueryService.queryForList("getProductionProcessList", params, ProductionProcess.class, 0, 0);
        for(ProductionProcess p : scgy){
            p.setGylx(p.getGylx().equals("1")?"常见工艺":(p.getGylx().equals("2")?"其他高温或高压、涉及易燃易爆等物质的工艺过程":(p.getGylx().equals("3")?"具有国家规定限期淘汰的工艺名录和设备":"其他")));
        }
        ee.exportExcels(scgy, ProductionProcesslistTitles, ProductionProcesslistproperties, "生产工艺", 2);
        //环境风险受体
        List<RiskReceptor> fxst = basicQueryService.queryForList("getRiskReceptorForWorldExport", params, RiskReceptor.class, 0, 0);
//        for(RiskReceptor r : fxst){
//            r.setReceptorType(r.getReceptorType().equals("1")?"水":"气");
//        }
        ee.exportExcels(fxst, RiskReceptorTitles, RiskReceptorproperties, "环境风险受体", 3);
        //突发环境事件情景分析
        List<QyScenarioAnalysis> qjfx = basicQueryService.queryForList("getQyScenarioAnalysisList", params, QyScenarioAnalysis.class, 0, 0);
        ee.exportExcels(qjfx, QyScenarioAnalysislistTitles, QyScenarioAnalysislistproperties, "突发环境事件情景分析", 4);
        //应急物资
        List<EmergencySubstance> yjwz = basicQueryService.queryForList("getEmergencySubstanceList", params, EmergencySubstance.class, 0, 0);
        ee.exportExcels(yjwz, EmergencySubstanceTitles, EmergencySubstanceproperties, "应急物资", 5);
        //应急指挥通讯录
        List<EmergencyCrew> zhtxl = basicQueryService.queryForList("getEmergencyCrew", params, EmergencyCrew.class, 0, 0);
        ee.exportExcels(zhtxl, EmergencyCrewTitles, EmergencyCrewproperties, "应急指挥通讯录", 6);
        //应急外部联络表
        List<ForeignAidUnit> wbllb = basicQueryService.queryForList("getForeignAidUnit", params, ForeignAidUnit.class, 0, 0);
        ee.exportExcels(wbllb, ForeignAidUnitTitles, ForeignAidUnitproperties, "应急外部联络表", 7);
        //应急专家
        List<EmergencySpecialist> yjzj = basicQueryService.queryForList("getEmergencySpecialist", params, EmergencySpecialist.class, 0, 0);
        ee.exportExcels(yjzj, EmergencySpecialistTitles, EmergencySpecialistproperties, "应急专家", 8);
        //导出Excel
        ee.outExcel(response, request, excelName);
    }


    //生产装置
//    private static final String[] Company1UnitTitles = {"行业类别代码","经度","纬度"};
//    private static final String[] Company1Unitproperties = {"industryCategoryCode","longitude","latitude"};
    //生产装置
//    private static final String[] ProductionUnitTitles = {"装置名称","主要原材料","产品名称","年产能(吨)"};
//    private static final String[] ProductionUnitproperties = {"name","materials","productName","annualCapacity"};
    //RiskReceptor
    private static final String[] RiskReceptorTitles = {"保护目标", "方位", "距离", "人数/户数", "保护目的", "标准","保护类型"};
    private static final String[] RiskReceptorproperties = {"protectionObjectives", "position", "distance", "households", "objective", "standard","bhlx"};
    //环境污染事故源
    private static final String[] AccidentSourceTitles = {"事故源", "危险性类别", "危险特性", "泄漏应急措施"};
    private static final String[] AccidentSourceproperties = {"accidentSource", "level", "hazardousCharacteristics", "emergencyMeasure"};
    //应急物资
    private static final String[] EmergencySubstanceTitles = {"名称", "数量(个)", "计量单位", "规格/型号", "贮存地点"};
    private static final String[] EmergencySubstanceproperties = {"name", "number", "numberUtil", "typeNumber", "address"};
    //应急指挥通讯录
    private static final String[] EmergencyCrewTitles = {"部门", "姓名", "职务", "办公室电话", "手机"};
    private static final String[] EmergencyCrewproperties = {"department", "name", "companyAgency", "officeTelephone", "telephone"};
    //应急外部联络表
    private static final String[] ForeignAidUnitTitles = {"部门", "办公室电话"};
    private static final String[] ForeignAidUnitproperties = {"department", "telephone"};
    //
    private static final String[] EmergencySpecialistTitles = {"姓名", "单位", "职务/职称", "联系电话"};
    private static final String[] EmergencySpecialistproperties = {"name", "theUtil", "professionalField", "telephone"};
    //HjRiskSubstances

    //    private static final List<String> HjRiskSubstanceslistTitles = Arrays.asList(new String[]{"名称", "化学代码", "使用或贮存场所", "最大使用或贮存量(吨)", "临界量(吨)"});
//    private static final List<String> HjRiskSubstanceslistproperties = Arrays.asList(new String[]{"name","chemicalCode","place","storage","ljl"});
    private static final String[] HjRiskSubstanceslistTitles = {"风险类型", "名称", "化学代码", "使用或贮存场所", "最大使用或贮存量(吨)", "临界量(吨)"};
    private static final String[] HjRiskSubstanceslistproperties = {"fxlx", "name", "chemicalCode", "place", "storage", "ljl"};
    //RiskSourceUnit
    private static final String[] RiskSourceUnitlistTitles = {"风险单元名称", "环境风险物质", "最大贮存量（m³）", "是否有围堰", "是否防渗", "是否防腐", "是否有应急池或污水处理设施", "是否有喷淋措施和预警监测"};
    private static final String[] RiskSourceUnitlistproperties = {"address", "riskName", "maxNumber", "sfwy", "sffs", "sfff", "sfqtcl", "sfwscl"};
    //生产工艺
    private static final String[] ProductionProcesslistTitles = {"生产工艺类型", "生产工艺名称"};
    private static final String[] ProductionProcesslistproperties = {"gylx", "gyName"};
    //突发环境事件情景分析
    private static final String[] QyScenarioAnalysislistTitles = {"可能发生突发环境事件场所", "应对措施"};
    private static final String[] QyScenarioAnalysislistproperties = {"place", "measures"};
}
