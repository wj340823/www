package com.sucsoft.gzhbyjwz.util;

import com.sucsoft.gzhbyjwz.bean.constant.ApplicationEnv;
import org.apache.http.protocol.HTTP;
import org.springframework.util.FileCopyUtils;

import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import net.sf.json.JSONObject;

public class HttpUtil {
	
	public static String get(String httpUrl, String httpArg) {
	    httpUrl = httpUrl + "?" + httpArg;
	    InputStream inStream = null;
	    try {
	        URL url = new URL(httpUrl);
	        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	        connection.setRequestMethod("GET");
	        inStream = connection.getInputStream();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return readInputStream(inStream);
	}
	
    public static String post(String urls, String args) {
        HttpURLConnection conn;
        InputStream inStream = null;
        try {
            URL url = new URL(urls);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            conn.setUseCaches(false);
            conn.setDoOutput(true);
            byte[] bytes = args.getBytes("UTF-8");
            conn.getOutputStream().write(bytes);
            inStream = conn.getInputStream();
        } catch (Exception e){
        	e.printStackTrace();
        }
        return readInputStream(inStream);
    }
    
    public static String readInputStream(InputStream inputStream) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        String result = "";
        byte[] buffer = new byte[1024];
        int len;
        try {
            while ((len = inputStream.read(buffer)) != -1) {
                stream.write(buffer, 0, len);
            }
            inputStream.close();
            result = stream.toString(ApplicationEnv.encoding);
        } catch (Exception e) {
            return "Read InputStream Error";
        }
        return result;
    }
   
    
    public static String sendGet(String url, String param) {
        String result = "";
        BufferedReader in = null;
        try {
            String urlNameString = url + "?" + param;
            URL realUrl = new URL(urlNameString);
            // 打开和URL之间的连接
            URLConnection connection = realUrl.openConnection();
            // 设置通用的请求属性
            connection.setRequestProperty("accept", "*/*");
            connection.setRequestProperty("connection", "Keep-Alive");
            connection.setConnectTimeout(1000);
            connection.setRequestProperty("user-agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 建立实际的连接
            connection.connect();
            // 定义 BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            e.printStackTrace();
        }
        // 使用finally块来关闭输入流
        finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return result;
    }
	 public static String sendPost(String url, String param) {
	        PrintWriter out = null;
	        BufferedReader in = null;
	        String result = "";
	        try {
	            URL realUrl = new URL(url);
	            // 打开和URL之间的连接
	            URLConnection conn = realUrl.openConnection();
	            // 设置通用的请求属性
	            conn.setRequestProperty("accept", "*/*");
	            conn.setRequestProperty("connection", "Keep-Alive");
	            conn.setRequestProperty("user-agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
	            // 发送POST请求必须设置如下两行
	            conn.setDoOutput(true);
	            conn.setDoInput(true);
	            // 获取URLConnection对象对应的输出流
	            out = new PrintWriter(conn.getOutputStream());
	            // 发送请求参数
	            out.print(param);
	            // flush输出流的缓冲
	            out.flush();
	            // 定义BufferedReader输入流来读取URL的响应
	            in = new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
	            String line;
	            while ((line = in.readLine()) != null) {
	                result += line;
	            }
	        } catch (Exception e) {
	            System.out.println("发送 POST 请求出现异常！"+e+url);
	            e.printStackTrace();
	        }
	        //使用finally块来关闭输出流、输入流
	        finally{
	            try{
	                if(out!=null){
	                    out.close();
	                }
	                if(in!=null){
	                    in.close();
	                }
	            }
	            catch(IOException ex){
	                ex.printStackTrace();
	            }
	        }
	        return result;
	    }


    public static void download(String url, String filename,HttpServletResponse response) throws IOException {
        download(new File(url),filename,response);
    }

    public static void download(File file, String filename,HttpServletResponse response) throws IOException {
        FileInputStream fis = null;
        try {
            fis =  new FileInputStream(file);
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition","attachment;filename=" + StringUtils.toUtf8String(filename));
            FileCopyUtils.copy(fis,response.getOutputStream());
        }finally {
            fis.close();
        }
    }
}
