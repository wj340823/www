package com.sucsoft.gzhbyjwz.service.emergencyEvent;

import com.sucsoft.gzhbyjwz.bean.cache.CalculationCache;
import com.sucsoft.gzhbyjwz.bean.dc12.AtmosphericEvent;
import com.sucsoft.gzhbyjwz.bean.param.event.AtmosphericEventParam;
import com.sucsoft.gzhbyjwz.bean.param.event.EventParam;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.util.HttpUtil;
import com.sucsoft.gzhbyjwz.util.StringUtils;
import com.sucsoft.gzhbyjwz.util.UploadUtil;
import net.sf.json.JSONObject;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.spring.web.json.Json;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

@Service
public class AtmosphericEventService {

    @Value("${AtmosphericEvent.json.filePath}")
    private String filePath;

    @Value("${AtmosphericEvent.json.posturl}")
    private String posturl;

    @Autowired
    private BasicQueryService queryService;

    @Autowired
    private CalculationCache calculationCache;

    private Logger log = Logger.getLogger(getClass());

    public static final String jisuanzhong = "1";
    public static final String yiwancheng = "2";
    public static final String shibai = "3";

    public void downloadJson(String id,HttpServletResponse response) throws Exception {
        Map param = new HashMap();
        param.put("simulationId",id);
        List<AtmosphericEvent> list = queryService.queryForList("getEvent",param,AtmosphericEvent.class,0,0);
        if (list != null && list.size() >0){
            AtmosphericEvent event = list.get(0);
            String url = event.getResultjsonurl();
            //String url = "all_data.json";
            HttpUtil.download(Paths.get(filePath,url).toFile(),"all_data.json",response);
        }else {
            return;
        }

    }

    /**
     * 森  17:07:03
     url : "http://172.18.65.90:5000/continuousModel"

     表单数据：
     {'Q': 10000000,
     'u': 2,
     'tl': 1200,
     'angle': 30,
     'id': 30,
     'lg': 107.5166,
     'lt': 26.5833}

     返回值：“模型已在后台运算”
     （返回值可以修改，因为数据量较大，运算需要时间，所以先返回响应，等计算完成后再把json文件post过去）

     你那边需要写一个接收json文件的服务。
     * @param eventParam
     * @return
     */
    public Object postArgs(AtmosphericEventParam eventParam){
        AtmosphericEventParam eventParam1=new AtmosphericEventParam();
        eventParam1.setQ(Float.valueOf(10000000));
        eventParam1.setU(Float.valueOf(2));
        eventParam1.setTl(Float.valueOf(1200));
        eventParam1.setAngle(Float.valueOf(30));
        eventParam1.setId(eventParam.getId());
        eventParam1.setLg((float) 107.5166);
        eventParam1.setLt((float) 26.5833);

        JSONObject jsonObject = JSONObject.fromObject(eventParam);
        String jsonstr = jsonObject.toString();
        System.out.println(jsonObject);

        return HttpUtil.sendPost(posturl,jsonObject.toString());
    }

    @Async
    public Object postArgs(AtmosphericEvent event){

        JSONObject jsonObject = JSONObject.fromObject(event.getArgs());
        AtmosphericEventParam o = (AtmosphericEventParam) JSONObject.toBean(jsonObject, AtmosphericEventParam.class);
        o.setId(event.getSimulationId());
        jsonObject = JSONObject.fromObject(o);
        String jsonstr = jsonObject.toString();
        System.out.println(jsonstr);

        return HttpUtil.sendPost(posturl,jsonObject.toString());
    }

    @Transactional
    public AtmosphericEvent saveEvent(EventParam eventParam){
        AtmosphericEvent atmosphericEvent = new AtmosphericEvent();
        atmosphericEvent.setSimulationId(eventParam.getId());
        atmosphericEvent.setArgs(eventParam.getArgs());
        atmosphericEvent.setCompanyId(eventParam.getCompanyId());
        atmosphericEvent.setCompanyName(eventParam.getCompanyName());
        atmosphericEvent.setName(eventParam.getName());
        atmosphericEvent.setTime(eventParam.getTime());
        atmosphericEvent.setEventType(eventParam.getEventType());
        atmosphericEvent.setPollutant(eventParam.getPollutant());
        atmosphericEvent.setHalfdeadRange(eventParam.getHalfdeadRange());
        atmosphericEvent.setHarmRange(eventParam.getHarmRange());
        atmosphericEvent.setColors(eventParam.getColors());
        atmosphericEvent.setLevels(eventParam.getLevels());
        atmosphericEvent.setId(StringUtils.getUUID());
        atmosphericEvent.setUpdatetime(new Date());
        return atmosphericEvent;
    }

    @Transactional
    public Object addQi(EventParam eventParam) {
        String simulationId = StringUtils.getUUID();
        eventParam.setId(simulationId);

        AtmosphericEvent atmosphericEvent = saveEvent(eventParam);
        atmosphericEvent.setStatus(jisuanzhong);
        queryService.getDataset().save(atmosphericEvent);

        postArgs(atmosphericEvent);
        return simulationId;
    }

    @Transactional
    public Object addShui(EventParam eventParam) {
        AtmosphericEvent atmosphericEvent = saveEvent(eventParam);
        //水模型默认已完成
        atmosphericEvent.setStatus(yiwancheng);
        return queryService.getDataset().save(atmosphericEvent);
    }

    public Object receiveJson(String id, MultipartFile file) throws Exception {
        String url = UploadUtil.saveMultipartFile(file, filePath);

        //更新缓存
        calculationCache.put(id,url);

        Map param = new HashMap();
        param.put("simulationId",id);
        List<AtmosphericEvent> list = queryService.queryForList("getEvent",param,AtmosphericEvent.class,0,0);
        log.info("list.size: "+list.size());
        if (list != null && list.size() >0){
            AtmosphericEvent event = list.get(0);
            event.setUpdatetime(new Date());
            event.setResultjsonurl(url);
            event.setStatus(yiwancheng);
            queryService.update(event);
        }
        return "success";
    }

    public Object listEvent(String companyId, String name, Integer pageNo, Integer pageSize) throws Exception {
        Map param = new HashMap();
        if (!org.springframework.util.StringUtils.isEmpty(companyId)){
            param.put("companyId",companyId);
        }
        if (!org.springframework.util.StringUtils.isEmpty(name)){
            param.put("name","%"+name+"%");
        }

        return queryService.queryForPage("getEvent",param,AtmosphericEvent.class,pageNo,pageSize);
    }

    public Object checkSimulation(String simulationId) throws Exception {
        Map param = new HashMap();
        param.put("simulationId",simulationId);
        List<AtmosphericEvent> list = queryService.queryForList("getEvent",param,AtmosphericEvent.class,0,0);
        if (list != null && list.size() >0){
            AtmosphericEvent event = list.get(0);
            return event.getStatus();
        }else {
            return "-1";
        }
    }

    public Object addSimulation(String jsonParam) {
        String simulationId = StringUtils.getUUID();
        JSONObject jsonObject = JSONObject.fromObject(jsonParam);
        jsonObject.put("id",simulationId);

        calculationCache.put(simulationId,null);
        HttpUtil.sendPost(posturl,jsonObject.toString());
        Map map = new HashMap<>();
        map.put("simulationId",simulationId);

        return map;
    }

    public void downloadTempJson(String id, HttpServletResponse response) throws ExecutionException, IOException {
        String url = calculationCache.get(id).getResultjsonUrl();

        HttpUtil.download(Paths.get(filePath,url).toFile(),"all_data.json",response);

    }
}
