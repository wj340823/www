package com.sucsoft.gzhbyjwz.service.companyinfo;

import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
//import net.sf.ehcache.util.ProductInfo;
import com.sucsoft.gzhbyjwz.util.CommonUtils;
import com.sucsoft.gzhbyjwz.util.JwdFormat;
import com.sucsoft.gzhbyjwz.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * @Author luowb
 * @Date 2019/8/17 0017 12:38
 */
@Service
public class CompanyInfoService {

    @Autowired
    private BasicQueryService queryService;

    private static String SUCCODE ="200";
    private static String FAILCODE ="500";


    @Value("${file.upload.path}")
    private String filePath;

    @Value("${fj.modelExcleupload.path}")
    private String fjPath;

    /**
     * 新增风险源基本信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> saveEnterpriseInfo(EnterpriseInformation enterpriseInformation, String type){
        enterpriseInformation.setCompanyId(getUid());
        if("1".equals(type)){
            String lat = enterpriseInformation.getLatitude();
            String lon = enterpriseInformation.getLongitude();
            enterpriseInformation.setLatitude(JwdFormat.tranformPos(lat).toString());
            enterpriseInformation.setLatitude(JwdFormat.tranformPos(lon).toString());
        }
        return addObjectBean(enterpriseInformation);
    }

    /**
     * 更新风险源基本信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> updateEnterpriseInfo(EnterpriseInformation enterpriseInformation, String type){
        if("1".equals(type)){
            String lat = enterpriseInformation.getLatitude();
            String lon = enterpriseInformation.getLongitude();
            enterpriseInformation.setLatitude(JwdFormat.tranformPos(lat).toString());
            enterpriseInformation.setLatitude(JwdFormat.tranformPos(lon).toString());
        }
        return updateProductInfo(enterpriseInformation,enterpriseInformation.getCompanyId());
    }

    /**
     * 新增产品信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> saveProductInfo(ProductInfo productInfo){
        productInfo.setId(getUid());
        return addObjectBean(productInfo);
    }

    /**
     * 更新产品信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> updateProductInfo(ProductInfo productInfo){
        return updateProductInfo(productInfo,productInfo.getCompanyId());
    }

    /**
     * 删除产品信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public void deleteProductInfo(String id){
        queryService.delete(id,ProductInfo.class);
    }

    /**
     * 查询风险源基本信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public EnterpriseInformation getEnterpriseInformationDetailInfo(String id) throws Exception {
        EnterpriseInformation info = queryService.get(id,EnterpriseInformation.class);
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",id);
        List<ProductInfo> productInfos =  queryService.queryForList("getProductInfoList",param,ProductInfo.class,1,99999);
        info.setProductInfos(productInfos);
        return info;
    }


    /**
     * 新增文件信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> addFileStorage(FileStorage fileStorage){
        fileStorage.setId(getUid());
        return addObjectBean(fileStorage);
    }

    /**
     * 删除文件信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public void deleteFileStorage(String id){
        queryService.delete(id,FileStorage.class);
    }

    /**
     * 文件信息列表
     * @author luowb
     * @date 2019/8/17 0017
     */
    public List<FileStorage> getFileStorageList(String companyId) throws Exception {
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",companyId);
        return queryService.queryForList("getFileStorageList",param,FileStorage.class,1,99999);
    }

    /**
     * 文件上传
     * @author luowb
     * @date 2019/8/17 0017
     */
    public Map<String,Object> uploadFile(MultipartFile file,String name,String companyId,String type) throws IOException {
        FileStorage fileStorage = new FileStorage();
        String path = "";
        if(file!=null&&!file.isEmpty()){
            String fileName = file.getOriginalFilename();
            path +=filePath+ File.separator+"file"+File.separator+System.currentTimeMillis()+""+File.separator+fileName;
            File dest = new File(path);
            // 检测是否存在目录
            if (!dest.getParentFile().exists()) {
                dest.getParentFile().mkdirs();// 新建文件夹
            }
            //如果文件存在 则修改文件名称
            if(dest.exists()){
                fileName = System.currentTimeMillis()+fileName;
                dest = new File(filePath+"/"+fileName);
            }
            String thePath = dest.getAbsolutePath();
            dest = new File(thePath);
            // 文件写入
            file.transferTo(dest);
            fileStorage.setFileName(name);
            fileStorage.setUrl(path);
            fileStorage.setRelationId(companyId);
            fileStorage.setType(type);
            return addFileStorage(fileStorage);
        }
        return null;
    }

    /**
     * 文件下载
     * @author luowb
     * @date 2019/8/17 0017
     */
    public void downLoadFile(String id, HttpServletResponse response) throws IOException {
        FileStorage fileStorage = queryService.get(id,FileStorage.class);
        if(fileStorage != null) {
            FileInputStream fis = null;
            try {
                fis = new FileInputStream(Paths.get(fileStorage.getUrl()).toFile());
                response.setContentType("application/x-download");
                response.addHeader("Content-Disposition", "attachment;filename=" + CommonUtils.toUtf8String(fileStorage.getFileName()));
                FileCopyUtils.copy(fis, response.getOutputStream());
            } finally {
                fis.close();
            }
        }
    }

    /**
     * 新增环境风险源单元
     * @author luowb
     * @date 2019/8/17 0017
     */
    public  Map<String,Object> addRiskSourceUnit(RiskSourceUnit riskSourceUnit){
        riskSourceUnit.setId(getUid());
        return addObjectBean(riskSourceUnit);
    }

    /**
     * 更新环境风险源单元
     * @author luowb
     * @date 2019/8/17 0017
     */
    public  Map<String,Object> updateRiskSourceUnit(RiskSourceUnit riskSourceUnit){
        return updateProductInfo(riskSourceUnit,riskSourceUnit.getId());
    }

    /**
     * 删除风险源信息单元信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public void deleteRiskSourceUnit(String id){
        queryService.delete(id,RiskSourceUnit.class);
    }

    /**
     * 环境风险源单元列表
     * @author luowb
     * @date 2019/8/17 0017
     */
    public List<RiskSourceUnit> getRiskSourceUnitList(String companyId) throws Exception {
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",companyId);
        return queryService.queryForList("getRiskSourceUnitList",param,RiskSourceUnit.class,1,99999);
    }

    /**
     * 获取环境风险源信息单元信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public RiskSourceUnit getRiskSourceUnitInfo(String id){
        return queryService.get(id,RiskSourceUnit.class);
    }


    /**
     * 新增环境风险防控设施
     * @author luowb
     * @date 2019/8/17 0017
     */
    public  Map<String,Object> addRiskControlMeasures(RiskControlMeasures riskControlMeasures){
        riskControlMeasures.setId(riskControlMeasures.getCompanyId());
        return addObjectBean(riskControlMeasures);
    }

    /**
     * 更新环境风险防控设施
     * @author luowb
     * @date 2019/8/17 0017
     */
    public  Map<String,Object> updateRiskControlMeasures(RiskControlMeasures riskControlMeasures){
        return updateProductInfo(riskControlMeasures,riskControlMeasures.getId());
    }

    /**
     * 获取环境风险防控设施信息
     * @author luowb
     * @date 2019/8/17 0017
     */
    public RiskControlMeasures getRiskControlMeasuresInfo(String id){
        return queryService.get(id,RiskControlMeasures.class);
    }

    public <T> Map<String,Object> addObjectBean(T pojo){
        return resutMap(SUCCODE,queryService.save(pojo).toString());
    }

    public <T> Map<String,Object> updateProductInfo(T pojo,String id){
        queryService.update(pojo);
        return resutMap(SUCCODE,id);
    }

    /**
     * 生成主键
     * @author luowb
     * @date 2019/8/17 0017
     */
    private String getUid(){
        return UUID.randomUUID().toString().replaceAll("-","");
    }

    /**
     * 设置返回结果
     * @author luowb
     * @date 2019/8/17 0017
     */
    private Map<String,Object> resutMap(String code,Object info){
        Map<String,Object> resutMap = new HashMap<>();
        resutMap.put(code,info);
        return resutMap;
    }

    /**
     * 气环境新增或更新环境风险防控设施
     * @param riskControlMeasures
     * @return
     */
    @Transactional(rollbackFor=Exception.class)
    public Map<String, Object> addOrUpdateQiRiskControlMeasures(QiRiskControlMeasures riskControlMeasures) {
        return updateProductInfo(riskControlMeasures,riskControlMeasures.getQiRiskControlMeasures_Id());
    }

    /**
     * 水环境新增或更新环境风险防控设施
     * @param riskControlMeasures
     * @return
     */
    public Map<String, Object> addOrUpdateSuiRiskControlMeasures(SuiRiskControlMeasures riskControlMeasures) {
        return updateProductInfo(riskControlMeasures,riskControlMeasures.getSuiRiskControlMeasures_Id());
    }

    /**
     * 获取气环境风险防控设施信息
     * @param companyId
     * @return
     */
    public List<QiRiskControlMeasures> getQiRiskControlMeasuresInfo(String companyId) throws Exception {
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",companyId);
        return queryService.queryForList("getQiRiskControlMeasures",param,QiRiskControlMeasures.class,1,99999);
    }

    /**
     * 获取水环境风险防控设施信息
     * @param companyId
     * @return
     */
    public List<SuiRiskControlMeasures> getSuiRiskControlMeasuresInfo(String companyId) throws Exception {
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",companyId);
        return queryService.queryForList("getSuiRiskControlMeasures",param,SuiRiskControlMeasures.class,1,99999);
    }

    /**
     *获取环境风险受体-整体信息
     * @param companyId
     * @return
     */
    public List<RiskReceptorWithCompany> getRiskReceptorWithCompanyInfo(String companyId) throws Exception {
        Map<String,Object> param = new HashMap<>();
        param.put("companyId",companyId);
        return queryService.queryForList("getRiskReceptorWithCompany",param,RiskReceptorWithCompany.class,1,99999);
    }


    @Transactional(rollbackFor=Exception.class)
    public Map<String,Object> updateRiskReceptorWithCompanyInfo(RiskReceptorWithCompany riskReceptorWithCompany) {
        return updateProductInfo(riskReceptorWithCompany,riskReceptorWithCompany.getId());
    }

    /**
     * 下载Excel模板
     * @param response
     */
    public void downModelfj(HttpServletResponse response) throws IOException {
        String url = "批量导入模板.xls";
        FileInputStream fis = null;
        try {
            //fis = new FileInputStream(Paths.get(fjPath, url).toFile());
            fis = new FileInputStream(Paths.get(fjPath, url).toFile());
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition", "attachment;filename=" + new String(url.getBytes("UTF-8"),"ISO8859-1"));//StringUtils.toUtf8String(url)
            FileCopyUtils.copy(fis, response.getOutputStream());
        } finally {
            fis.close();
        }
    }
}
