package com.sucsoft.gzhbyjwz.util;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


public class DateUtils {
	public static final SimpleDateFormat sdf = new SimpleDateFormat(
			"yyyy-MM-dd HH:mm:ss");
	public static final SimpleDateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");

	public static Date toDayStart(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		try {
			return sdf.parse(sdf.format(date));
		} catch (ParseException e) {
			return null;
		}
	}

	public static Date toDayStart(long timeInMillis){
		Calendar dayStart = Calendar.getInstance();
		dayStart.setTimeInMillis(timeInMillis);
		dayStart.set(Calendar.HOUR, 0);
		dayStart.set(Calendar.MINUTE, 0);
		dayStart.set(Calendar.SECOND, 0);
		dayStart.set(Calendar.MILLISECOND, 0);
		Date start = dayStart.getTime();
		return start;
	}

	public static Date toDayEnd(long timeInMillis){
		Calendar todayEnd = Calendar.getInstance();
		todayEnd.setTimeInMillis(timeInMillis);
		todayEnd.set(Calendar.HOUR, 23);
		todayEnd.set(Calendar.MINUTE, 59);
		todayEnd.set(Calendar.SECOND, 59);
		todayEnd.set(Calendar.MILLISECOND, 999);
		Date end = todayEnd.getTime();
		return end;
	}

	public static Date toDayEnd(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date tmp = null;
		try {
			tmp = sdf.parse(sdf.format(date));
		} catch (ParseException e) {
			return null;
		}
		return new Date(tmp.getTime() + 24 * 60 * 60 * 1000 - 1);
	}

	public static String fmtDate(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(date);
	}

	public static String fmtDateTime(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(date);
	}

	// 将Long类型的时间转成String类型的时间
	public static String Long2String(Long time) {
		if(time ==null ){
			return "";
		}
		Date startDate = new Date(time);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(startDate);
	}

	public static Date String2Time(String strDate) {
		try {
			return sdf.parse(strDate);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	public static Date String2Date(String strDate) {
		try {
			return ymd.parse(strDate);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}


	/**
	 * 查询两天之间相差多少天
	 * 
	 * @param fDate
	 *            开始时间
	 * @param oDate
	 *            结束时间
	 * @return
	 */
	public static int daysOfTwo(Date fDate, Date oDate) {

		Calendar aCalendar = Calendar.getInstance();

		aCalendar.setTime(fDate);

		int day1 = aCalendar.get(Calendar.DAY_OF_YEAR);

		aCalendar.setTime(oDate);

		int day2 = aCalendar.get(Calendar.DAY_OF_YEAR);

		return day2 - day1;
	}

	/**
	 * 获取某年某月的第一天
	 * 
	 * @param year
	 * @param month
	 * @return
	 */
	public static String getLastDayOfMonth(int year, int month) {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, year);
		cal.set(Calendar.MONTH, month);
		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DATE));
		return new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	}

	// 最后一天
	public static String getFirstDayOfMonth(int year, int month) {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, year);
		cal.set(Calendar.MONTH, month);
		cal.set(Calendar.DAY_OF_MONTH, cal.getMinimum(Calendar.DATE));
		return new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	}

	/**
	 * 把time转成yyyy-MM-dd HH:mm:ss的格式
	 * 
	 * @param time
	 * @return
	 */
	public static String second2String(Object time) {
		if (time != null) {
			return DateUtils
					.Long2String(Long.parseLong(time.toString()) * 1000);
		} else {
			return "无上传记录";
		}

	}

	/**
	 * 返回当前时间的yyyy-MM-dd HH:mm:ss格式
	 * 
	 * @return
	 */
	public static String getCurrentTime() {
		long curLong = System.currentTimeMillis();
		String cur = Long2String(curLong);
		return cur;
	}
	/**
	 * 输入时间得到改时间的第一天和最后一天的long值
	 * @param time
	 * @return
	 */
	public static long[] getMonthSAndE(String time) {
		int year = Integer.parseInt(time.substring(0, 4));
		int month = Integer.parseInt(time.substring(4));
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, year);
		cal.set(Calendar.MONTH, month-1);
		cal.set(Calendar.HOUR, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.DAY_OF_MONTH, cal.getMinimum(Calendar.DATE));
		long start = cal.getTimeInMillis()/1000;
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DATE));
		long end = cal.getTimeInMillis()/1000;
		long[] l = { start, end };
		return l;
	}
	
	/**
	 * 根据时间获取该月的开始时间
	 * @param time 2017-03
	 * @return long值
	 */
	public static long getMonthStart(String time){
		int year = Integer.parseInt(time.substring(0, 4));
		int month = Integer.parseInt(time.substring(4));
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, year);
		cal.set(Calendar.MONTH, month-1);
		cal.set(Calendar.HOUR, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.DAY_OF_MONTH, cal.getMinimum(Calendar.DATE));
		long start = cal.getTimeInMillis()/1000;
		return start;
	}
	
	/**
	 * 开始时间和结束时间内，按天分割，返回每天的开始时间和结束时间
	 * @param start
	 * @param end
	 * @return [{"startTime":long,"endTime":long,"num":1},{"startTime":long,"endTime":long,"num":2}]
	 */
	public static List<Map<String, Object>> spliteByDays(long start,long end) {
		List<Map<String, Object>> result = new LinkedList<>();
		
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(start);
		while(cal.getTimeInMillis() < end){
			Map<String, Object> timeNode = new HashMap<>();
			timeNode.put("num", cal.get(Calendar.DAY_OF_MONTH));
			timeNode.put("startTime", cal.getTimeInMillis());
			cal.add(Calendar.DAY_OF_MONTH, 1);
			timeNode.put("endTime", cal.getTimeInMillis());
			result.add(timeNode);
		}
		
		return result;
	}
	/**
	 * 给出long值得到该long属于一个月的第几天
	 */
	public static String longToMonth(long time){
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date(time));
		return String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
	}
	
	public static String daysAgo(Integer daysAgo) {
		daysAgo = (daysAgo!=null)?daysAgo:0;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.HOUR, cal.get(Calendar.HOUR)-daysAgo);
		String dayEnd = sdf.format(cal.getTime());
		return dayEnd;
	}

	/**
	 * 得到n天前的0点
	 *
	 * @param dayAgo
	 * @return
	 */
	public static String dayBigan(Integer dayAgo) {
		dayAgo = (dayAgo != null) ? dayAgo : 0;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) - dayAgo);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		String dayBigan = sdf.format(cal.getTime());
		return dayBigan;
	}

	/**
	 * 两个时间相差距离多少天多少小时多少分多少秒
	 * @return String 返回值为：xx天xx小时xx分xx秒
	 */
	public static String getDistanceTime(long start, long end) {
		Date one;
		Date two;
		long day = 0;
		long hour = 0;
		long min = 0;
		long sec = 0;
		one = new Date(start);
		two = new Date(end);
		long time1 = one.getTime();
		long time2 = two.getTime();
		long diff ;
		if(time1<time2) {
			diff = time2 - time1;
		} else {
			diff = time1 - time2;
		}
		day = diff / (24 * 60 * 60 * 1000);
		hour = (diff / (60 * 60 * 1000) - day * 24);
		min = ((diff / (60 * 1000)) - day * 24 * 60 - hour * 60);
		sec = (diff/1000-day*24*60*60-hour*60*60-min*60);
		return day + "天" + hour + "小时" + min + "分" + sec + "秒";
	}


}
