package com.sucsoft.gzhbyjwz.controller.riskManage;

import com.cgs.authox.spring.helper.AuthoxContextHolder;
import com.cgs.dc.PojoDataset;
import com.sucsoft.gzhbyjwz.bean.common.Page;
import com.sucsoft.gzhbyjwz.bean.constant.TaskStatus;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.EmergencyTaskParam;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.ReleaseTaskParam;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.TaskParam;
import com.sucsoft.gzhbyjwz.service.XzqyService;
import com.sucsoft.gzhbyjwz.service.riskmanage.EmergencyTaskService;
import com.sucsoft.gzhbyjwz.service.riskmanage.TaskCountService;
import com.sucsoft.gzhbyjwz.service.user.UserService;
import com.sucsoft.gzhbyjwz.util.PageBean;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * @author jmy
 * @date 2018-4-28
 */
@RestController
@RequestMapping("/emergencyTask")
@Api(value="EmergencyTaskController",description="风险排查任务管理")
public class EmergencyTaskController {

    @Autowired
    private EmergencyTaskService taskService;

    @Autowired
    private PojoDataset dataset;

    @Autowired
    private TaskCountService taskCountService;

    @Autowired
    private UserService userService;

    @Autowired
    private XzqyService xzqyService;

    /**
     * 新增排查项saveRiskInventory
     * @param inventory
     * @return
     * @throws Exception
     */
    @Transactional
    @RequestMapping(value="/saveInventory",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="新增排查表",notes="新增排查表",
            response=Object.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object saveInventory(
            @RequestBody RiskInventory inventory) throws Exception{
        return taskService.saveInventory(inventory);
    }

    @Transactional
    @RequestMapping(value="/deleteEmergencyTask/{id}",method= RequestMethod.DELETE)
    @ApiOperation(httpMethod="DELETE",value="省厅用户单个删除任务",notes="省厅用户单个删除任务",
            response=Object.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object deleteEmergencyTask(@PathVariable("id") Serializable id) throws Exception{
        return taskService.deleteEmergencyTask(id);
    }



    @RequestMapping(value="/saveEmergencyTask",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="新增任务",notes="新增任务",
            response=Object.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object saveMergencyTask(
            @RequestBody EmergencyTask task) throws Exception{
        return taskService.addTask(task);
    }

    @RequestMapping(value="/releaseTaskToEnterprise",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="派发任务到企业",notes="派发任务到企业",
            response=Object.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object releaseTaskToEnterprise(
            @RequestBody ReleaseTaskParam param) throws Exception{
        taskService.releaseTaskToEnterprise(param);
        return "success";
    }

    @Transactional
    @RequestMapping(value="/commitEnterpriseTask",method= RequestMethod.PUT)
    @ApiOperation(httpMethod="PUT",value="提交任务",notes="提交任务",
            response=Object.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object commitEnterpriseTask(
            Integer taskId) throws Exception{
        EnterpriseTask task = dataset.get(taskId, EnterpriseTask.class);
        task.setStatus(TaskStatus.CountyAndDistrict);
        task.setCompletetime(new Date());
        return dataset.update(task);

    }

    //批量新增或修改排查项saveRiskInventory
    @Transactional(rollbackFor = Exception.class)
    @RequestMapping(value="/saveRiskInventory",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="批量上传隐患项",notes="批量上传隐患项",
            response=Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public void saveRiskInventory(
            @RequestBody HiddenDanger[] hiddenDangers) throws Exception{

        for (int i = 0; i < hiddenDangers.length; i++) {
            if (hiddenDangers[i].getId() == null){
                dataset.save(hiddenDangers[i]);
            }else {
                dataset.update(hiddenDangers[i]);
            }
        }
    }


    @Autowired
    AuthoxContextHolder contextHolder;

    @RequestMapping(value="/listEmergencyTask",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="排查任务列表",notes="带分页",
            response=Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public PageBean<Map> listEmergencyTask(
            EmergencyTaskParam param,
            @RequestParam(value = "pageNo", defaultValue = "1")   Integer pageNo,
            @RequestParam(value = "pageSize", defaultValue = "15")Integer pageSize,
            HttpServletRequest request) throws Exception{

        //行政区域数据权限
        param.setXzqyIdList(xzqyService.getChildrenLeafId(null));
        return taskService.listEmergencyTask(param,pageNo,pageSize);
    }

    @RequestMapping(value="/listUndoTask",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="待办任务列表",notes="带分页",
            response=Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public PageBean listUndoTask(
            @RequestParam(value = "pageNo", defaultValue = "1")   Integer pageNo,
            @RequestParam(value = "pageSize", defaultValue = "15")Integer pageSize,
            HttpServletRequest request) throws Exception{

        TaskParam param = new TaskParam();
        param.getStatusList().add(TaskStatus.Reject);
        param.getStatusList().add(TaskStatus.Undone);

        //企业数据权限
        param.setEnterpriseId(userService.getCurUserComId(request.getSession()));
        return taskService.listUndoTask(param,pageNo,pageSize);
    }

    @RequestMapping(value="/getTaskDetails",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="任务详情",notes="任务详情",
            response=Map.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Map getTaskDetails(
            //@RequestParam("任务id")
            Integer id) throws Exception{
        return taskService.getTaskDetails(id);
    }


    @RequestMapping(value="/listDone",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="已办任务列表",notes="已办任务",
            response=Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Page listDone(
            TaskParam param,
                        @RequestParam(value = "pageNo", defaultValue = "1")  Integer pageNo,
                        @RequestParam(value = "pageSize", defaultValue = "15")Integer pageSize,
            HttpServletRequest request) throws Exception{
        //TaskParam param = new TaskParam();
        param.setNotStatus(TaskStatus.Undone);

        //企业数据权限
        param.setEnterpriseId(userService.getCurUserComId(request.getSession()));
        return taskService.listTaskByStatus(param,pageNo,pageSize);
    }

//    @RequestMapping(value="/listPass",method= RequestMethod.GET)
//    @ApiOperation(httpMethod="GET",value="已通过任务列表",notes="已通过任务列表",
//            response=Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
//    public Page listPass(
//            TaskParam param,
//            @RequestParam(value = "pageNo", defaultValue = "1")   Integer pageNo,
//            @RequestParam(value = "pageSize", defaultValue = "15")Integer pageSize) throws Exception{
//        //TaskParam param = new TaskParam();
//        param.setStatus(TaskStatus.Pass);
//
//        return taskService.listTaskByStatus(param,pageNo,pageSize);
//    }

    @RequestMapping(value="/countTask",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="任务统计",notes="{num:企业数量,cnum:已完成企业数量,emergency,significant," +
            "rectificated,rectificating,notrectificated,limitRectificate," +
            "licensesToSupervise,investigated}",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public List countTask(@ApiParam("任务ID")Integer taskId) throws Exception{

        return taskCountService.countTask(taskId);
    }

    @RequestMapping(value="/countCompletedEnterprise",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="首页风险排查统计",notes = "complete:已完成企业数,notcomplete:未完成企业数",
            response=Map.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Map countCompletedEnterprise() throws Exception{

        return taskCountService.countCompletedEnterprise();
    }


    @RequestMapping(value="/addTaskAttachment",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="添加任务附件",notes="添加任务附件",
            response= Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public void addTaskfj(@RequestParam MultipartFile file, TaskAttachment attachment) throws Exception{
          taskService.addTaskAttachment(file,attachment);
    }

    @RequestMapping(value="/downTaskAttachment",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="下载任务附件",notes="下载任务附件",
            response= Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public void downTaskfj(String attachmentId, HttpServletResponse response, HttpServletRequest request) throws Exception{
        System.out.println(request.getSession().getMaxInactiveInterval());
        taskService.downTaskAttachment(attachmentId,response);
    }


    @RequestMapping(value="/listAttachmentByTask",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="任务附件列表",notes="任务相关的附件列表,带分页",
            response= Page.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Page listAttachmentByPlan(String taskId,Integer pageNo,Integer pageSize) throws Exception{
        return taskService.listAttachmentByTask(taskId,pageNo,pageSize);
    }

    @RequestMapping(value="/dxfs",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="短信服务",notes="短信服务")
    public void listAttachmentByPlan(String tel) throws Exception{
         taskService.pushaly(tel);
    }

}
