package com.sucsoft.gzhbyjwz.bean.cache;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.sucsoft.gzhbyjwz.bean.dc12.AtmosphericEvent;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

@Component
public class CalculationCache {

    @Autowired
    private BasicQueryService queryService;

    private static final Logger LOGGER =
            LoggerFactory.getLogger(CalculationCache.class);
    //缓存包装类
    public LoadingCache resultCache =
            CacheBuilder.newBuilder()
                    .maximumSize(130) // maximum 100 records can be cached
                    .expireAfterAccess(1, TimeUnit.HOURS) // cache will expire after 30 minutes of access
                    .build(new CacheLoader(){
                        @Override
                        public Object load(Object o) throws Exception {
                            return loadfromdb(o);
                        } // build the cacheloader

                        });

    //如果缓存中没有查到，从db中查
    public Simulation loadfromdb(Object o) {
        if (StringUtils.isEmpty(o)){
            return null;
        }

        Map param = new HashMap();
        param.put("simulationId",o);
        try {
            List<AtmosphericEvent> list = queryService.queryForList("getEvent", param, AtmosphericEvent.class, 0, 0);
            if (list != null && list.size()>0){
                Simulation simulation = new Simulation()
                        .setSimulationId(o.toString())
                        .setResultjsonUrl(list.get(0).getResultjsonurl());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public class Simulation{
        private String simulationId;
        private String resultjsonUrl;

        public String getSimulationId() {
            return simulationId;
        }

        public Simulation setSimulationId(String simulationId) {
            this.simulationId = simulationId;
            return this;
        }

        public String getResultjsonUrl() {
            return resultjsonUrl;
        }

        public Simulation setResultjsonUrl(String resultjsonUrl) {
            this.resultjsonUrl = resultjsonUrl;
            return this;
        }
    }

    public Simulation get(Object k) throws ExecutionException {
        return (Simulation) resultCache.get(k);
    }

    public void put(String simulationId,String resultjsonUrl){
        resultCache.put(simulationId,new Simulation()
                .setResultjsonUrl(resultjsonUrl)
                .setSimulationId(simulationId));
    }
}
