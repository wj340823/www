package com.sucsoft.gzhbyjwz.controller.emergencyEvent;


import com.sucsoft.gzhbyjwz.bean.cache.CalculationCache;
import com.sucsoft.gzhbyjwz.bean.constant.EventType;
import com.sucsoft.gzhbyjwz.bean.param.event.EventParam;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.service.emergencyEvent.AtmosphericEventService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

@RestController
@RequestMapping("/AtmosphericEvent")
@Api(value="气模型模块",description="气模型模块")
public class AtmosphericEventController {
    @Autowired
    private AtmosphericEventService atmosphericEventService;

    @Autowired
    private CalculationCache calculationCache;

    private Logger log = Logger.getLogger(getClass());

    @RequestMapping(value="/checkSimulation",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="轮训检测模拟计算是否完成",notes="轮训检测模拟计算是否完成",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "simulationId",paramType = "query",value = "本次模拟计算的唯一标识")
    })
    public Object checkSimulation(String simulationId) throws Exception {

        if (calculationCache.get(simulationId)!= null && calculationCache.get(simulationId).getResultjsonUrl() != null){
            return true;
        }
        return false;
        //return atmosphericEventService.checkSimulation(simulationId);
    }

    @RequestMapping(value="/listEvent",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="列表查询事件",notes="列表查询事件",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object listEvent(String companyId,String name,Integer pageNo,Integer pageSize) throws Exception {

        return atmosphericEventService.listEvent(companyId,name,pageNo,pageSize);
    }

    @RequestMapping(value="/downloadTempJson",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="下载模型计算好的json",notes="下载模型计算好的json",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public void downloadTempJson(String id,HttpServletResponse response) throws Exception {

        atmosphericEventService.downloadTempJson(id,response);
    }

    @RequestMapping(value="/downloadJson",method= RequestMethod.GET)
    @ApiOperation(httpMethod="GET",value="下载模型计算好的json",notes="下载模型计算好的json",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public void downloadJson(String id,HttpServletResponse response) throws Exception {

        atmosphericEventService.downloadJson(id,response);
    }

    @RequestMapping(value="/receiveJson",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="接收模型发送过来的json结果",notes="接收模型发送过来的json结果",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object receiveJson(String id, MultipartFile file) throws Exception {
        log.info("receiveJson,id: "+id);
        return atmosphericEventService.receiveJson(id,file);
    }

    @RequestMapping(value="/addSimulation",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="发起一次临时计算",notes="不需要保存，不生成事件",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object addSimulation(String jsonParam) throws Exception {
        log.info("jsonParam : "+jsonParam);
        return atmosphericEventService.addSimulation(jsonParam);
    }

    @RequestMapping(value="/addEvent",method= RequestMethod.POST)
    @ApiOperation(httpMethod="POST",value="添加事件",notes="返回此次模拟计算的唯一标识simulationId",
            response=List.class,produces= MediaType.TEXT_PLAIN_VALUE)
    public Object addEvent(@RequestBody EventParam eventParam) throws Exception {

        if (eventParam.getEventType() == null){
            return "fail:eventType is null";
        }
        if (EventType.qi == eventParam.getEventType().intValue()){
            return atmosphericEventService.addQi(eventParam);
        }else if (EventType.shui == eventParam.getEventType().intValue()){
            return atmosphericEventService.addShui(eventParam);
        }else {
            return "fail";
        }
    }
}
