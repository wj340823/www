package com.sucsoft.gzhbyjwz.util;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @Author luowb
 * @Date 2019/7/30 0030 9:24
 */
public class CommonUtils {

    /**
     * 获取对象所有字段
     * @Author luowb
     */
    public static <T> Map getFieldMap(T pojo){
        Map<String,Object> fieldMap = new HashMap<>();
        Field[] fields = pojo.getClass().getDeclaredFields();
        for(Field field : fields){
            fieldMap.put(field.getName(),field);
        }
        return fieldMap;
    }

    /**
     * 通过反射动态set某字段值
     * @Author luowb
     */
    public static <T> void  setField(T pojo,String field,Object value) throws Exception {
        Class clazz = pojo.getClass();
        PropertyDescriptor pd = new PropertyDescriptor(field, clazz);
        Method setMethod = pd.getWriteMethod();
        setMethod.invoke(pojo, value);
    }

    /**
     * 通过反射动态get某字段值
     * @Author luowb
     */
    public static <T> Object  getField(T pojo,String field) throws Exception {
        Class clazz = pojo.getClass();
        PropertyDescriptor pd = new PropertyDescriptor(field, clazz);
        Method getMethod = pd.getReadMethod();
        return getMethod.invoke(pojo);
    }

    /**
     * 更新对象数据
     * @Author luowb
     */
    public static  <T> void setClassFieldValue(T pojo,String[] strs,Object[] obs){
        Map<String,Object> fields = CommonUtils.getFieldMap(pojo);
        for(int i = 0;i<strs.length;i++){
            if(fields.containsKey(strs[i])){
                try {
                    if(obs[i] != null){
                        setField(pojo,strs[i],obs[i]);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    continue;
                }
            }
        }
    }

    public static int getAgeByBirth(Date birthDay) throws Exception {
        int age = 0;
        Calendar cal = Calendar.getInstance();
        if (cal.before(birthDay)) { //出生日期晚于当前时间，无法计算
            throw new IllegalArgumentException(
                    "The birthDay is before Now.It's unbelievable!");
        }
        int yearNow = cal.get(Calendar.YEAR);  //当前年份
        int monthNow = cal.get(Calendar.MONTH);  //当前月份
        int dayOfMonthNow = cal.get(Calendar.DAY_OF_MONTH); //当前日期
        cal.setTime(birthDay);
        int yearBirth = cal.get(Calendar.YEAR);
        int monthBirth = cal.get(Calendar.MONTH);
        int dayOfMonthBirth = cal.get(Calendar.DAY_OF_MONTH);
        age = yearNow - yearBirth;   //计算整岁数
        if (monthNow <= monthBirth) {
            if (monthNow == monthBirth) {
                if (dayOfMonthNow < dayOfMonthBirth) {
                    age--;//当前日期在生日之前，年龄减一
                }
            } else {
                age--;//当前月份在生日之前，年龄减一
            }
        }
        return age;
    }

    public static String getRoomName(Integer i1,Integer i2){
        if(i2<10){
            return i1+"0"+i2;
        }
        return i1+""+i2;
    }

    /**
     * 获取指定格式时间字符串
     * @author luowb
     * @date 2019/8/14
     */
    public static String getDateStr(Date date,String pattern ){
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        return simpleDateFormat.format(date);
    }

    public static Date strToDate(String dateStr,String pattern) throws ParseException {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        return simpleDateFormat.parse(dateStr);
    }

    public static Date formatDate(Date date,String pattern) throws ParseException {
        String dateStr = getDateStr(date,pattern);
        return strToDate(dateStr,pattern);
    }

    public static String addKey(String word,String key,Integer sum) throws Exception {
        Integer wordLength = word.toCharArray().length;
        if(wordLength>sum){
            throw new Exception("Error : word length > sum number");
        }
        if(wordLength.equals(sum)){
            return word;
        }
        StringBuffer str = new StringBuffer();
        for(int i =sum-wordLength;i>0;i--){
            str.append(key);
        }
        str.append(word);
        return str.toString();
    }

    /**
     * 文件名中文输出方法修改
     * @param s 中文名称
     * @return
     */
    public static String toUtf8String(String s) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 0 && c <= 255) {
                sb.append(c);
            } else {
                byte[] b;
                try {
                    b = Character.toString(c).getBytes("utf-8");
                } catch (Exception ex) {
                    System.out.println(ex);
                    b = new byte[0];
                }
                for (int j = 0; j < b.length; j++) {
                    int k = b[j];
                    if (k < 0) {
                        k += 256;
                    }
                    sb.append("%" + Integer.toHexString(k).toUpperCase());
                }
            }
        }
        return sb.toString();
    }
}
