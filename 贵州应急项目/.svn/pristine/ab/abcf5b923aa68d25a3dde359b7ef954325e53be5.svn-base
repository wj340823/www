package com.sucsoft.gzhbyjwz.service.riskmanage;

import com.cgs.dc.client.impl.PojoDatasetImpl;
import com.sucsoft.gzhbyjwz.bean.common.Page;
import com.sucsoft.gzhbyjwz.bean.constant.EmergencyTaskStatus;
import com.sucsoft.gzhbyjwz.bean.constant.ExamType;
import com.sucsoft.gzhbyjwz.bean.constant.TaskStatus;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.CompanyParam;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.EmergencyTaskParam;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.ReleaseTaskParam;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.TaskParam;
import com.sucsoft.gzhbyjwz.service.XzqyService;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;

import com.sucsoft.gzhbyjwz.service.user.UserService;
import com.sucsoft.gzhbyjwz.util.PageBean;
import com.sucsoft.gzhbyjwz.util.PageUtils;
import com.sucsoft.gzhbyjwz.util.StringUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.util.*;
import java.util.logging.Logger;

import static com.sucsoft.gzhbyjwz.util.MessageUtil.sendMsg;

@Service
public class EmergencyTaskService {

    @Autowired
    private BasicQueryService basicQueryService;

    @Autowired
    private XzqyService xzqyService;

    @Autowired
    private UserService userService;


    @Value("${emergencyTask.filePath}")
    private String filePath;

    private Logger logger = Logger.getLogger(EmergencyTaskService.class.getName());


    /**
     * 条件查询任务
     * @param taskParam
     * @param pageNo
     * @param pageSize
     * @return
     * @throws Exception
     */
    public PageBean listUndoTask(TaskParam taskParam, Integer pageNo, Integer pageSize) throws Exception {
        Map param = taskParam.toParam();

        List<Map> list = basicQueryService.queryForPage("listTaskToEnterprise", param, Map.class, pageNo, pageSize).getDataList();

        //根据时间判断状态
        long now = System.currentTimeMillis();
        long daysago = now - ((long) EmergencyTaskStatus.daysInMillisecond);
        for (Map map : list) {
            Integer status = (Integer) map.get("STATUS");
            Long deadline = ((java.sql.Timestamp) map.get("DEADLINE")).getTime();
            status = getStatus(deadline, status, now, daysago);
            map.put("STATUS", status);
        }
        PageBean pageBean = PageUtils.getPage(list, pageNo, pageSize);
        return pageBean;
        //return basicQueryService.queryForPage("listTaskToEnterprise",param,Map.class,pageNo,pageSize);
    }

    //条件查询任务
    public Page listTaskByStatus(TaskParam taskParam, Integer pageNo, Integer pageSize) throws Exception {

        Map param = taskParam.toParam();

        Page<Map> page = basicQueryService.queryForPage("listTaskToEnterprise", param, Map.class, pageNo, pageSize);

//        //根据时间判断状态
//        long now = System.currentTimeMillis();
//        long daysago = now - ((long) EmergencyTaskStatus.daysInMillisecond);
//        for (Map map : list) {
//            Integer status = (Integer) map.get("STATUS");
//            Long deadline = ((java.sql.Timestamp) map.get("DEADLINE")).getTime();
//            status = getStatus(deadline, status, now, daysago);
//            map.put("STATUS", status);
//        }
        return page;
        //return basicQueryService.queryForPage("listTaskToEnterprise",param,Map.class,pageNo,pageSize);
    }

    //listTaskToExam
    //带审批列表

    public Page listTaskToExam(TaskParam taskParam, Integer pageNo, Integer pageSize) throws Exception {
        Map param = taskParam.toParam();

        return basicQueryService.queryForPage("listTaskToExam", param, Map.class, pageNo, pageSize);
    }

    //审批记录
    public Page listExamLog(EmergencyTaskParam taskParam, Integer pageNo, Integer pageSize) throws Exception {
        Map param = taskParam.toParam();

        return basicQueryService.queryForPage("listExamLog", param, Map.class, pageNo, pageSize);
    }

    //获取任务详情
    public Map getTaskDetails(Integer id) throws Exception {
        Map result = new HashMap();

        EnterpriseTask task = basicQueryService.get(id, EnterpriseTask.class);
        if (task == null) {
            throw new RuntimeException("无法通过该id查找到EnterpriseTask：id=" + id);
        }
        Date d = new Date();
        task.setCompletetime(d);
        EnterpriseInformation information = basicQueryService.get(task.getEnterpriseId(),EnterpriseInformation.class);


        //result = BeanUtils.describe(task);
        ObjectMapper om = new ObjectMapper();
        result = om.convertValue(task, Map.class);
        result.put("companyName",information.getCompanyName());
        RiskInventory inventory1 = null;
        RiskInventory inventory2 = null;
        if (task.getEmergencyManagementId() != null) {
            inventory1 = basicQueryService.get(task.getEmergencyManagementId(), RiskInventory.class);
        }
        if (task.getRiskManagementId() != null) {
            inventory2 = basicQueryService.get(task.getRiskManagementId(), RiskInventory.class);
        }

        result.put("emergencyManagement", inventory1);
        result.put("riskManagement", inventory2);
        return result;
    }

    //获取审核表详情
    public Map getRiskinventoryDetails(Integer id) throws Exception {
        Map param = new HashMap();
        param.put("id", id);
        List<Map> list = basicQueryService.queryForList("getRiskinventoryDetails", param, Map.class, 0, 0);
        if (list.size() == 0) {
            throw new RuntimeException("无法通过该id查找到Riskinventory：id=" + id);
        }
        return list.get(0);
    }

    /**
     * 审批通过或驳回
     * @param log
     * @throws Exception
     */
    @Transactional(rollbackFor = Exception.class)
    public void pass(ExaminationLog log) throws Exception {
        Assert.notNull(log.getType(), "审批状态type字段不能为空");
        Assert.notNull(log.getTaskId(), "任务id不能为空");

        EnterpriseTask task = basicQueryService.get(log.getTaskId(), EnterpriseTask.class);
        task.setComment(log.getComment());
        task.setReviewer(log.getReviewer());
        switch (log.getType()) {
            case ExamType.Pass: {
                pass(task);
                break;
            }
            case ExamType.Reject: {
                task.setStatus(TaskStatus.Reject);
                break;
            }
            default:
                break;
        }
        task.setCommenttime(new Date());
        basicQueryService.update(task);
        basicQueryService.save(log);
    }

    //审核通过
    public void pass(EnterpriseTask task) throws Exception {
        task.setStatus(TaskStatus.Pass);
        task.setCompletetime(new Date());

        Map param = new HashMap();
        param.put("emergencyTaskId", task.getEmergencyTaskId());

        //是否该emergencytask下的所有enterprisetask都完成了
        boolean isComplete = true;
        List<Map> tasklist = basicQueryService.queryForList("listTaskToEnterprise", param, Map.class, 0, 0);
        for (Map map : tasklist) {
            //排除自己
            if (((Integer)map.get("ID")).equals(task.getId())){
                continue;
            }
            //有一个未完成，则状态为未完成
            if ((Integer) map.get("STATUS") != TaskStatus.Pass) {
                isComplete = false;
                break;
            }
        }

        //若所有企业都已经完成了，则该条emergencytask状态修改为完成
        if (isComplete) {
            EmergencyTask task1 = basicQueryService.getDataset().get(task.getEmergencyTaskId(), EmergencyTask.class);
            task1.setStatus(EmergencyTaskStatus.yiwancheng.getStatus());
            basicQueryService.update(task1);
        }

    }

    /**
     * 派发任务
     * @param task
     * @return
     * @throws Exception
     */
    @Transactional
    public Object addTask(EmergencyTask task) throws Exception {
        return basicQueryService.getDataset().save(task);
    }

    public void addAttachment(MultipartFile file, PlanAttachment attachment) throws IOException {
        int size = file.getInputStream().available();
        String url = file.getOriginalFilename();
        if(file.isEmpty()) {
            Path path = Paths.get(filePath, url);
            File dest = path.toFile();
            if (!dest.getParentFile().exists()) {
                dest.getParentFile().mkdirs();
            }
            while (dest.exists()) {
                dest = Paths.get(filePath, url.replace(".", "1.")).toFile();
            }
            file.transferTo(dest);

            attachment.setType("fxypc");
            attachment.setUrl(url);
            attachment.setSize(String.valueOf(size));
            attachment.setTime(new Date());
            basicQueryService.save(attachment);
        }
    }

    public Page getEmergencTaskList(Integer taskId,String xzqyId,Integer pageNo,Integer pageSize,Boolean flag) throws Exception {
        Map<String,Object> params = new HashMap<>();
        if(flag){
            List<String> xzqyList = xzqyService.getChildrenAndSelfId(xzqyId);
            xzqyList.add(xzqyId);
            removeDuplicate(xzqyList);
            params.put("xzqyList",xzqyList);
        }else {
            params.put("xzqy",xzqyId);
        }
        params.put("taskId",taskId);
        Page<Map> page = basicQueryService.queryForPage("listEmergencyInfo",params,Map.class,pageNo,pageSize);
        return page;
    }

    public void removeDuplicate(List arlList) {
        HashSet h = new HashSet(arlList);
        arlList.clear();
        arlList.addAll(h);
    }

    /**
     * 派发任务给企业
     * @param param
     */
    public void releaseTaskToEnterprise(ReleaseTaskParam param) throws Exception {
        //保存TaskXzqyStatus表数据
        String curXzqyId = userService.getCurXzqyId();
        List<TaskXzqyStatus> statusList = listTaskXzqyStatus(param.getTaskId(),curXzqyId);

        SessionFactory sessionFactory = ((PojoDatasetImpl)basicQueryService.getDataset()).getSessionFactoryInstance();
        Session session=sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            EmergencyTask task = session.get(EmergencyTask.class,param.getTaskId());
            if (statusList == null || statusList.size() ==0){
                TaskXzqyStatus status = new TaskXzqyStatus();
                status.setTaskId(param.getTaskId());
                status.setXzqyId(curXzqyId);
                status.setReleaseStatus(1);
                session.save(status);
            }

            List<CompanyParam> companyList = param.getCompanyList();
            for (int i=0; i<companyList.size(); i++) {
                CompanyParam company = companyList.get(i);
                EnterpriseTask enterpriseTask = toEnterpriseTask(task);
                enterpriseTask.setEnterpriseId(company.getCompanyId());
                enterpriseTask.setEmergencyTaskId(param.getTaskId());
                enterpriseTask.setXzqyId(company.getXzqyId());
                enterpriseTask.setLxdh(company.getLxdh());
                enterpriseTask.setResponsiblePerson(company.getFzr());
                session.save(enterpriseTask);

                if(i%20==0) {
                    session.flush();
                    session.clear();
                }
            }
            transaction.commit();
        }catch (Exception e){
            e.printStackTrace();
            transaction.rollback();
        }finally {
            session.close();
        }

    }

    public List<TaskXzqyStatus> listTaskXzqyStatus(Integer taskId,String xzqyId) throws Exception {
        Map param = new HashMap();
        param.put("taskId",taskId);
        param.put("xzqyId",xzqyId);

        List<TaskXzqyStatus> list = basicQueryService.queryForList(
                "listTaskXzqyStatus",param,TaskXzqyStatus.class,0,0);

        return list;
    }

    public EnterpriseTask toEnterpriseTask(EmergencyTask task) throws InvocationTargetException, IllegalAccessException {
        EnterpriseTask enterpriseTask = new EnterpriseTask();
        org.apache.commons.beanutils.BeanUtils.copyProperties(enterpriseTask, task);
        return enterpriseTask;
    }

    //新增或修改
    @Transactional
    public Object saveInventory(RiskInventory inventory) {
        Integer id = null;
        if (inventory.getId() != null) {
            basicQueryService.update(inventory);
            id = inventory.getId();
        } else {
            id = (Integer) basicQueryService.getDataset().save(inventory, RiskInventory.class.getName());
        }


        EnterpriseTask task = basicQueryService.get(inventory.getTaskId(), EnterpriseTask.class);

        switch (inventory.getType()) {
            case 1: {
                task.setEmergencyManagementId(id);
                break;
            }
            case 2: {
                task.setRiskManagementId(id);
                break;
            }
            default:
                break;
        }
        basicQueryService.update(task);
        Map<String, Object> map = new HashMap<>();
        map.put("id", id);
        return map;
    }

    /**
     * 省厅用户，任务管理列表查询
     * @param param
     * @param pageNo
     * @param pageSize
     * @return
     * @throws Exception
     */
    public PageBean<Map> listEmergencyTask(EmergencyTaskParam param, Integer pageNo, Integer pageSize) throws Exception {

        List<Map> list = listEmergencyTask(param);
        List<Map> rlist = new ArrayList<>();
        //过滤状态
        if (param.getStatus() != null && param.getStatus() != -1) {
            for (Map map : list) {
                if ((map.get("STATUS") != null &&
                        ((Integer) map.get("STATUS")).intValue() == param.getStatus().intValue())) {
                    rlist.add(map);
                }
            }
            return PageUtils.getPage(rlist, pageNo, pageSize);
        } else {
            return PageUtils.getPage(list, pageNo, pageSize);
        }
    }


    public List<Map> listEmergencyTask(EmergencyTaskParam param) throws Exception {

        Map map = param.toParam();
        map.put("xzqyId",userService.getCurXzqyId());

        List<Map> list = basicQueryService.queryForList("listEmergencyTask", map, Map.class, 0, 0);

        //根据时间判断状态
        long now = System.currentTimeMillis();
        long daysago = now - EmergencyTaskStatus.daysInMillisecond;

        for (Map map1 : list) {
            Integer status = (Integer) map1.get("STATUS");

            Long deadline = ((Timestamp) map1.get("DEADLINE")).getTime();
            status = getStatus(deadline, status, now, daysago);

            map1.put("STATUS", status);
        }

        return list;
    }

    //判断状态
    public int getStatus(long deadline, Integer status, long now, long daysago) {

        if (status != EmergencyTaskStatus.yiwancheng.getStatus().intValue()) {

            //预警
            if (deadline - now < EmergencyTaskStatus.daysInMillisecond) {
                status = EmergencyTaskStatus.yujing.getStatus();
            }
            //超时
            if (deadline < now) {
                status = EmergencyTaskStatus.chaoshi.getStatus();
            }
        }
        return status;
    }

    /**
     * 省厅用户单个删除EmergencyTask
     *
     * @param id
     * @return
     * @throws Exception
     */
    @Transactional(rollbackFor = Exception.class)
    public Object deleteEmergencyTask(Serializable id) throws Exception {
        Map param = new HashMap();
        param.put("emergencyTaskId", id);

        //是否该emergencytask下存在某enterprisetask完成了
        boolean isComplete = false;
        List<Map> tasklist = basicQueryService.queryForList("listTaskToEnterprise", param, Map.class, 0, 0);
        for (Map map : tasklist) {
            //有一个为完成，则状态为未完成
            if ((Integer) map.get("STATUS") == TaskStatus.Pass) {
                isComplete = true;
                break;
            }
        }
        if (!isComplete) {
            deleteEmergencyTask(Integer.parseInt(id.toString()));
            return "success";
        } else {
            return "企业已提交任务，无法删除。";
        }
    }

    /**
     * 省厅删除任务
     * @param id
     */
    @Transactional(rollbackFor = Exception.class)
    public void deleteEmergencyTask(Integer id) throws Exception {

        String sql = "DELETE FROM enterprisetask WHERE enterprisetask.EMERGENCYTASKID = "+id;
        basicQueryService.getDataset().createNativeQuery(sql).executeUpdate();
        basicQueryService.getDataset().createNativeQuery(sql);
        basicQueryService.delete(id,EmergencyTask.class);

        return;
    }

    @Transactional
    public void updateEmergencyTask(String taskId,String attendId){
        EmergencyTask task = basicQueryService.get(Integer.parseInt(taskId),EmergencyTask.class);
        if(task != null){
            task.setAttendId(attendId);
            basicQueryService.update(task);
        }
    }

    public void test() throws Exception {
        List<String> list = xzqyService.getChildrenLeafId(null);

    }

    public void addTaskAttachment(MultipartFile file, String taskId) throws Exception{
        addTaskAttachment(file,taskId,"task");
    }

    //添加附件
    @Transactional
    public String addTaskAttachment(MultipartFile file, String taskId,String type) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("taskId", taskId);
        List list = basicQueryService.queryForList("listAttachmentByTask", param, TaskAttachment.class, 0, 0);
        if(list != null && list.size()>0){
            TaskAttachment attachment = new TaskAttachment();
            String id = UUID.randomUUID().toString();
            attachment.setId(id);
            attachment.setTaskId(taskId);
            if(file!=null){
                int size = file.getInputStream().available();
                String url = file.getOriginalFilename();
                if(file != null) {
                    Path path = Paths.get(filePath, url);
                    File dest = path.toFile();
                    if (!dest.getParentFile().exists()) {
                        dest.getParentFile().mkdirs();
                    }
                    int j=1;
                    while (dest.exists()) {
                        dest = Paths.get(filePath, url.replace(".",j+".")).toFile();
                        j++;
                    }
                    file.transferTo(dest);
                    attachment.setType(type);
                    attachment.setUrl(url);
                    attachment.setSize(String.valueOf(size));
                    attachment.setTime(new Date());
                    id = (String) basicQueryService.save(attachment);
                    return id;
                }
            }
        }
        return null;
    }

    public void saveTaskMap(String xzqyId,String taskId,String attendId){
        TaskAttachmentMap map = new TaskAttachmentMap();
        map.setId(UUID.randomUUID().toString());
        map.setXzqyId(xzqyId);
        map.setTaskId(taskId);
        map.setAttendId(attendId);
        basicQueryService.save(map);
    }

    public void deleteResultTaskAttend(String id){
        TaskAttachmentMap map = basicQueryService.get(id,TaskAttachmentMap.class);
        if(map != null){
            basicQueryService.delete(map.getAttendId(),TaskAttachment.class);
            basicQueryService.delete(id,TaskAttachmentMap.class);
        }
    }


    //附件下载
    public void downTaskAttachment(String attachmentId, HttpServletResponse response) throws IOException {
        TaskAttachment attachment = basicQueryService.get(attachmentId, TaskAttachment.class);
        if(attachment == null){
            return;
        }
        String url = attachment.getUrl();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(Paths.get(filePath, url).toFile());
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition", "attachment;filename=" + StringUtils.toUtf8String(attachment.getUrl()));
            FileCopyUtils.copy(fis, response.getOutputStream());
        } finally {
            fis.close();
        }
    }


    //根据预案id查询附件列表
    public Page listAttachmentByTask(String taskId, Integer pageNo, Integer pageSize) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("taskId", taskId);
        param.put("type","task");
        return basicQueryService.queryForPage("listAttachmentByTask", param, TaskAttachment.class, pageNo, pageSize);
    }

    public Page listResultAttachment(String taskId,Integer pageNo,Integer pageSize) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("taskId", taskId);
        param.put("xzqyIdList",xzqyService.getChildrenLeafId(null));
        return basicQueryService.queryForPage("listTaskAttachmentMap", param, Map.class, pageNo, pageSize);
    }

    /**
     * 短信服务
     */
    public void pushaly(String tel){
        sendMsg(tel,"");
    }
}
