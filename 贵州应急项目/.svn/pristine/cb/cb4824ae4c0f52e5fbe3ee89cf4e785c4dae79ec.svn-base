package com.sucsoft.gzhbyjwz.service;

import com.sucsoft.gzhbyjwz.bean.common.PoiInBean;
import com.sucsoft.gzhbyjwz.bean.common.ResultBean;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

@Service
public class YjInfosService {

    @Autowired
    private BasicQueryService basicQueryService;

    final int startindex = 1;

    @Transactional(rollbackFor=Exception.class)
    public ResultBean addYjzjExcel(HttpServletRequest request, String companyId, MultipartFile file) {
        if (companyId == null){
            return new ResultBean(1,"上传失败");
        }

        ResultBean r = new ResultBean(0,"导入成功");

        try {
            //本地测试用
//			File file1 = new File("F:\\filein.xlsx");
//			PoiInBean poi = new PoiInBean(file1);
            if(file==null){
                return new ResultBean(1,"没有上传文件");
            }
            //风险源导入
            PoiInBean poi = new PoiInBean(file);
            importExcel(companyId, poi);


        } catch (Exception e) {
            //出现异常手动回滚事务
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            r.setResult(1);
            r.setMsg("导入失败");
            e.printStackTrace();
        }
        return r;
    }

    @Transactional(rollbackFor=Exception.class)
    public ResultBean importExcel(String companyId, PoiInBean poi) throws Exception {

        //应急物资导入
        poi.setClassAndNo(EmergencySubstance.class, startindex+0);//sheet
        poi.work(null, null);
        List<EmergencySubstance> listES = poi.getResultCache();//封装的缓存对象List<T>

        //向缓存对象填充数据
        for (EmergencySubstance p : listES) {
            p.setEmergencySubstanceId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急专家导入
        poi.setClassAndNo(EmergencySpecialist.class, startindex+1);
        poi.work(null, null);
        List<EmergencySpecialist> listZj = poi.getResultCache();

        for (EmergencySpecialist p : listZj){
            p.setEmergencySpecialistId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急指挥通讯录
        poi.setClassAndNo(EmergencyCrew.class, startindex+2);
        poi.work(null, null);
        List<EmergencyCrew> listEC = poi.getResultCache();

        for (EmergencyCrew p : listEC){
            p.setEmergencyCrewId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //应急外部联络人员
        poi.setClassAndNo(ForeignAidUnit.class, startindex+3);
        poi.work(null, null);
        List<ForeignAidUnit> listFA = poi.getResultCache();

        for (ForeignAidUnit p : listFA){
            p.setForeignAidUnitId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //环境风险物质
        poi.setClassAndNo(HjRiskSubstances.class, startindex+4);
        poi.work(null, null);
        List<HjRiskSubstances> listHS = poi.getResultCache();

        for (HjRiskSubstances p : listHS){
            p.setHjrisksubstances_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //环境风险单元
        poi.setClassAndNo(RiskSourceUnit.class, startindex+5);
        poi.work(null, null);
        List<RiskSourceUnit> listRS = poi.getResultCache();

        for (RiskSourceUnit p : listRS){
            p.setId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }
        poi.clearList();

        //生产装置区
        poi.setClassAndNo(ProductionUnit.class, startindex+6);
        poi.work(null, null);
        List<ProductionUnit> listPU = poi.getResultCache();

        for (ProductionUnit p : listPU){
            p.setProductionUnitId(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }

        //环境污染事故源
        poi.setClassAndNo(AccidentSource.class, startindex+7);
        poi.work(null, null);
        List<AccidentSource> listAS = poi.getResultCache();

        for (AccidentSource p : listAS){
            p.setAccidentsource_Id(getUUID());//emergencySubstanceId
            p.setCompanyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //突发环境事件情景分析
        poi.setClassAndNo(QyScenarioAnalysis.class, startindex+8);
        poi.work(null, null);
        List<QyScenarioAnalysis> listQA = poi.getResultCache();

        for (QyScenarioAnalysis p : listQA){
            p.setQyscenarioanalysis_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //环境风险受体
        poi.setClassAndNo(RiskReceptor.class, startindex+9);
        poi.work(null, null);
        List<RiskReceptor> listRR = poi.getResultCache();

        for (RiskReceptor p : listRR){
            if("水环境保护目标".equals(p.getReceptorType())){
                p.setReceptorType("1");
            }else if("气环境保护目标".equals(p.getReceptorType())){
                p.setReceptorType("2");
            }
            p.setRiskreceptor_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();

        //生产工艺
        poi.setClassAndNo(ProductionProcess.class, startindex+10);
        poi.work(null, null);
        List<ProductionProcess> listPP = poi.getResultCache();

        for (ProductionProcess p : listPP){
            p.setProductionProcess_Id(getUUID());//emergencySubstanceId
            p.setQyId(companyId);//companyId
            basicQueryService.save(p);
        }

        poi.clearList();
        return new ResultBean(0,"导入成功");
    }

    public String getUUID(){
        return UUID.randomUUID().toString().replaceAll("-", "");
    }
}
