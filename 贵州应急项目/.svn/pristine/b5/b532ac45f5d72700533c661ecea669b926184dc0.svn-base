package com.sucsoft.gzhbyjwz.service.user;

import com.cgs.authox.starter.dao.BaseUserDAO;
import com.cgs.authox.starter.dao.DefaultUserDAO;
import com.cgs.authox.starter.domain.BasicUser;
import com.cgs.authox.starter.domain.DefaultUser;
import com.cgs.authox.starter.util.CurrentPage;
import com.sucsoft.gzhbyjwz.bean.dc12.LoginLog;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

//@Service
public class TUserService implements BaseUserDAO<DefaultUser> {
    @Autowired
    UserService userService;

    @Autowired
    BasicQueryService queryService;

    @Override
    public BasicUser getBasicUser(String account, String password) {
        BasicUser basicUser = userService.getBasicUser(account,password);
        if (basicUser == null){
            return null;
        }
        //登录日志
        addLoginLog(basicUser);
        return basicUser;
    }

    /**
     * 添加登录日志
     * @param basicUser
     */
    public void addLoginLog(BasicUser basicUser){
        LoginLog loginLog = new LoginLog();
        loginLog.setAccount(basicUser.getAccount());
        loginLog.setDisplayName(basicUser.getDisplayName());
        loginLog.setLogTime(new Date());

        queryService.save(loginLog);
    }

    @Override
    public BasicUser getUserByShield(String name, String id) {
        return userService.getUserByShield(name,id);
    }

    @Override
    public String printConfig() {
        return userService.printConfig();
    }

    @Override
    public List<DefaultUser> getAllUsers() {
        return userService.getAllUsers();
    }

    @Override
    public CurrentPage<DefaultUser> getUsers(int pageNum, int pageSize) {
        return userService.getUsers(pageNum,pageSize);
    }

    @Override
    public List<DefaultUser> getUsers(String[] uids) {
        return userService.getUsers(uids);
    }

    @Override
    public List<DefaultUser> getUsersLike(String key, String value) {
        return userService.getUsersLike(key,value);
    }

    @Override
    public CurrentPage<DefaultUser> getUsersLike(String key, String value, int pageNum, int pageSize) {
        return userService.getUsersLike(key, value, pageNum, pageSize);
    }

    @Override
    public DefaultUser getUser(String id) {
        return userService.getUser(id);
    }

    @Override
    public void createUser(DefaultUser user) {
        userService.createUser(user);
    }

    @Override
    public void updateUser(DefaultUser user) {
        userService.updateUser(user);
    }

    @Override
    public void deleteUser(String id) {
        userService.deleteUser(id);
    }

    @Override
    public void resetPassword(String uid) {
        userService.resetPassword(uid);
    }

    @Override
    public void changePassword(String curUserName, String oldPwd, String newPwd) {
        userService.changePassword(curUserName, oldPwd, newPwd);
    }
}
