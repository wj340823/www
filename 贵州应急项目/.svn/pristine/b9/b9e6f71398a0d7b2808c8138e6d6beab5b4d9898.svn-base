package com.sucsoft.gzhbyjwz.util;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;

/**
 * Created by Administrator on 2016/9/8.
 */
public class ReflectUtils {

//    public static void main(String[] args) {
////        MyClass myClass = new MyClass()
////                .setField1("1")
////                .setField2("2")
////                .setField3("3");
////        Map map = object2Map(myClass);
////        System.out.print(map);
//    	
//    	String name = "QWER_ASDF";
//    	String fieldName = standardizingCase(name);
//    	System.out.println(fieldName);
//    }

    /**
     * 把对象转换成map，没有过滤为null的属性
     * @param o
     * @return
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public static Map object2Map(Object o){
        Map map = new HashMap();
        String[] fields = getFiledName(o);
        for (String field : fields) {
            map.put(field, getFieldValueByName(field, o));
        }
        return map;
    }

    public static Object getFieldValueByName(String fieldName, Object o) {
        try {
            String firstLetter = fieldName.substring(0, 1).toUpperCase();
            String getter = "get" + firstLetter + fieldName.substring(1);
            Method method = o.getClass().getMethod(getter, new Class[]{});
            Object value = method.invoke(o, new Object[]{});
            return value;
        } catch (Exception e) {
            //log.error(e.getMessage(),e);
            return null;
        }
    }

    /**
     * 获取属性名数组
     */
    public static String[] getFiledName(Object o) {
        Field[] fields = o.getClass().getDeclaredFields();
        String[] fieldNames = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            //System.out.println(fields[i].getType());
            fieldNames[i] = fields[i].getName();
        }
        return fieldNames;
    }

    /**
     * 获取属性类型(type)，属性名(name)，属性值(value)的map组成的list
     */
    @SuppressWarnings({ "unused", "rawtypes", "unchecked" })
	private static List getFiledsInfo(Object o) {
        Field[] fields = o.getClass().getDeclaredFields();
        String[] fieldNames = new String[fields.length];
        List list = new ArrayList();
        Map infoMap = null;
        for (int i = 0; i < fields.length; i++) {
            infoMap = new HashMap();
            infoMap.put("type", fields[i].getType().toString());
            infoMap.put("name", fields[i].getName());
            infoMap.put("value", getFieldValueByName(fields[i].getName(), o));
            list.add(infoMap);
        }
        return list;
    }

    /**
     * 获取对象的所有属性值，返回一个对象数组
     */
    public static Object[] getFiledValues(Object o) {
        String[] fieldNames = getFiledName(o);
        Object[] value = new Object[fieldNames.length];
        for (int i = 0; i < fieldNames.length; i++) {
            value[i] = getFieldValueByName(fieldNames[i], o);
        }
        return value;
    }


    public static class MyClass {
        private String field1;
        private String field2;
        private String field3;

        public String getField1() {
            return field1;
        }

        public MyClass setField1(String field1) {
            this.field1 = field1;
            return this;
        }

        public String getField2() {
            return field2;
        }

        public MyClass setField2(String field2) {
            this.field2 = field2;
            return this;
        }

        public String getField3() {
            return field3;
        }

        public MyClass setField3(String field3) {
            this.field3 = field3;
            return this;
        }
    }

    //map转成实体类
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public static Object transMapToDto(Map starObj , Object o) {
        String column_name = null;
        try {
            Set<Map.Entry<String, Object>> firstSet = starObj.entrySet();
            for (Map.Entry<String, Object> enty : firstSet) {
                column_name = standardizingCase(enty.getKey());
                Object object = enty.getValue();
                PropertyDescriptor property;
                try {
                    property = PropertyUtils.getPropertyDescriptor(o, column_name);
                    if(property == null){
                        continue;
                    }
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                    continue;
                }
                if(object == null){
                    continue;
                }
                if (object instanceof java.sql.Date) {
                    java.sql.Date dataValue = (java.sql.Date)object;
                    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    if(property.getPropertyType().getName().equals(java.sql.Date.class.getName())){
                        BeanUtils.setProperty(o, column_name, object);
                    }else if(property.getPropertyType().getName().equals(Timestamp.class.getName())){
                        BeanUtils.setProperty(o, column_name,new Timestamp(dataValue.getTime()));
                    }else if(property.getPropertyType().getName().equals(String.class.getName())){
                        BeanUtils.setProperty(o, column_name,df.format(dataValue));
                    }else if(property.getPropertyType().getName().equals(Date.class.getName())){
                        BeanUtils.setProperty(o, column_name,new Date(dataValue.getTime()));
                    }
                    continue;
                }
                if (object instanceof Timestamp) {
                    Timestamp dataValue = (Timestamp)object;
                    if (property.getPropertyType().getName().equals(String.class.getName())) {
                        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        BeanUtils.setProperty(o, column_name, df.format(dataValue));
                    } else if (property.getPropertyType().getName().equals(Date.class.getName())) {
                        Date date1 = new Date(dataValue.getTime());
                        BeanUtils.setProperty(o, column_name,date1);
                    } else if (property.getPropertyType().getName().equals(java.sql.Date.class.getName())){
                        java.sql.Date date2 = new java.sql.Date(dataValue.getTime());
                        BeanUtils.setProperty(o, column_name,date2);
                    } else {
                        BeanUtils.setProperty(o, column_name,dataValue);
                    }
                    continue;
                }
                // 由于Blob对象不能被序列化，所以将Blob字段处理为
                if ( object instanceof Blob) {
                    Blob b = (Blob) object;
                    byte[] byteData = b.getBytes((long) 1, (int) b.length());
                    BeanUtils.setProperty(o, column_name,byteData);
                    continue;

                }
                if (object != null && object instanceof Clob) {
                    Clob b = (Clob) object;
                    String content = b.getSubString((long) 1, (int) b.length());
                    BeanUtils.setProperty(o, column_name, content);
                    continue;
                }
                if (object != null) {
                    BeanUtils.setProperty(o, column_name, object);
                }
            }
        } catch (Exception e) {
            System.err.print("类型转换错误------" + o.getClass().getName() + "#"+ column_name + "转换失败");
        }

        return o;
    }
    
    //使大小写按找驼峰格式标准化
    private static String standardizingCase(String name) {
		String[] words = name.split("_");
		StringBuffer sBuffer = new StringBuffer();
		for (String word : words) {
			String first = word.substring(0, 1).toUpperCase();
			word = first+word.substring(1).toLowerCase();
			sBuffer.append(word);
		}
		String fieldName = sBuffer.toString();
		String first = fieldName.substring(0, 1).toLowerCase();
		fieldName = first+fieldName.substring(1);
    	return fieldName;
	}
    

}
