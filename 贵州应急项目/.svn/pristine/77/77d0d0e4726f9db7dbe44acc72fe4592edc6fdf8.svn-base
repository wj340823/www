package com.sucsoft.gzhbyjwz.util;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class JdbcConn {

	@Value("${authox.sql.driver-class-name}")
	private String driver;
	@Value("${authox.sql.url}")
	private String url;
	@Value("${authox.sql.username}")
	private String username;
	@Value("${authox.sql.password}")
	private String password;
 
	
	/*
     * 获取数据库连接
     */
	public  Connection getConnection()
	{
		Connection con=null;
		try{
		Class.forName(driver);
        con = DriverManager.getConnection(url, username, password);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return con;
	}
	
	/**
	 * 
	 * @param id  风险源id
 	 * @param sql  查询语句
	 * @return
	 */
	public List<Map<String, Object>> getPicture(String id,String sql)
	{
		Connection con =getConnection();
	    PreparedStatement pre = null;
	    ResultSet result = null;
	    List<Map<String, Object>> list = new ArrayList<>();
	    try{
	    	pre=con.prepareStatement(sql);
	    	pre.setString(1,id);
	    	result=pre.executeQuery();
	    	while(result.next())
	    	{	            
	    		Map<String, Object> photo=new HashMap<>();
	    		java.sql.Blob pic =result.getBlob(1);
	    		byte[] c=pic.getBytes(1, (int)pic.length());
	    		photo.put("photo", Base64.decodeBase64(Base64.encodeBase64(c)));
	    		String annualOutput = result.getString(2);
	    		String productName = result.getString(3);
	    		String fileType = result.getString(4);
	    		photo.put("productName", productName);
	    		photo.put("annualOutput", annualOutput);
	    		photo.put("fileType", fileType);
	    		list.add(photo);
	    	}    	
	    }catch (Exception e) {
	    	e.printStackTrace();
		}finally
	    {
			try
	        {
	            if (result != null)
	                result.close();
	            if (pre != null)
	                pre.close();
	            if (con != null)
	                con.close();
	        }
	        catch (Exception e)
	        {
	            e.printStackTrace();
	        }
	    }
	    return list;
	}
	
    //文件下载
    public String downLoadFile(String filePath,String fileName, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		if (fileName != null) {
	        File file = new File(filePath , fileName);
	        if (file.exists()) {
	        	fileName = URLEncoder.encode(fileName, "UTF-8");
	            response.setContentType("application/force-download");// 设置强制下载不打开
	            response.addHeader("Content-Disposition", "attachment;fileName=" + fileName);// 设置文件名
	            byte[] buffer = new byte[1024];
	            FileInputStream fis = null;
	            BufferedInputStream bis = null;
	            try {
	                fis = new FileInputStream(file);
	                bis = new BufferedInputStream(fis);
	                OutputStream os = response.getOutputStream();
	                int i = bis.read(buffer);
	                while (i != -1) {
	                    os.write(buffer, 0, i);
	                    i = bis.read(buffer);
	                }
	                return "success";
	            } catch (Exception e) {
	                e.printStackTrace();
	            } finally {
	                if (bis != null) {
	                    try {
	                        bis.close();
	                    } catch (IOException e) {
	                        e.printStackTrace();
	                    }
	                }
	                if (fis != null) {
	                    try {
	                        fis.close();
	                    } catch (IOException e) {
	                        e.printStackTrace();
	                    }
	                }
	            }
	        }
	    }
	    return "fail";
	}


}
