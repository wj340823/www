package com.sucsoft.gzhbyjwz.service.riskmanage;

import com.sucsoft.gzhbyjwz.bean.common.Page;
import com.sucsoft.gzhbyjwz.bean.constant.PreplanConstant;
import com.sucsoft.gzhbyjwz.bean.dc12.*;
import com.sucsoft.gzhbyjwz.bean.param.riskManage.PreplanParam;
import com.sucsoft.gzhbyjwz.service.common.BasicQueryService;
import com.sucsoft.gzhbyjwz.service.user.UserService;
import com.sucsoft.gzhbyjwz.util.StringUtils;
import com.sucsoft.gzhbyjwz.util.UploadUtil;
import com.sucsoft.gzhbyjwz.util.time.TimeStateYear;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.stereotype.Service;
import org.springframework.util.FileCopyUtils;

import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Logger;

@Service
public class EnterprisePreplanService {

    @Value("${emergencyPlan.filePath}")
    private String filePath;

    @Autowired
    private BasicQueryService basicQueryService;

    @Autowired
    private TaskCountService taskCountService;

    @Autowired
    private UserService userService;

    private Logger logger = Logger.getLogger(EnterprisePreplanService.class.getName());

    //预案管理列表
    public Page listEnterprisePreplan(PreplanParam preplanParam, Integer pageNo, Integer pageSize) throws Exception {
        Map<String, Object> param = preplanParam.toParam();

        Page<Map> page = basicQueryService.queryForPage("listEnterprisePreplan", param, Map.class, pageNo, pageSize);
        //判定状态
        judgeStatus(page);
        return page;
    }

    /**
     * 根据编制年份查询过期(3年)的预案
     *
     * @param preplanParam
     * @param pageNo
     * @param pageSize
     * @return
     * @throws Exception
     */
    public Page listAlarmPreplan(PreplanParam preplanParam, Integer pageNo, Integer pageSize) throws Exception {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        cal.add(Calendar.YEAR, -3);

        if (preplanParam.getEndDate() == null || preplanParam.getEndDate() > cal.getTimeInMillis()) {
            preplanParam.setEndDate(cal.getTimeInMillis());
        }
        return listEnterprisePreplan(preplanParam, pageNo, pageSize);
    }

    /**
     * 对查询结果的备案状态重新判定
     *
     * @param page
     */
    public void judgeStatus(Page<Map> page) {
        for (Map map : page.getDataList()) {
            if (map.get("RECORDSTATUS") == null) {
                map.put("RECORDSTATUS", PreplanConstant.RecordStatus.notOnRecord.getStatus());
            } else {
                int status = taskCountService.getPreplanStatus((Integer) map.get("RECORDSTATUS"), map.get("RECORDTIME") == null ? null : ((java.sql.Timestamp) map.get("RECORDTIME")).getTime());
                map.put("RECORDSTATUS", status);
            }

        }
    }
    //添加附件
    public void addPlanAttachment(MultipartFile file, PlanAttachment attachment) throws IOException {
        int size = file.getInputStream().available();
        String url = file.getOriginalFilename();
        if(!file.isEmpty()) {
            Path path = Paths.get(filePath, url);
            File dest = path.toFile();
            if (!dest.getParentFile().exists()) {
                dest.getParentFile().mkdirs();
            }
            while (dest.exists()) {
                dest = Paths.get(filePath, url.replace(".","1.")).toFile();
            }
            file.transferTo(dest);

            attachment.setUrl(url);
            attachment.setSize(String.valueOf(size));
            attachment.setTime(new Date());
            basicQueryService.save(attachment);

            EnterprisePreplan preplan = basicQueryService.get(attachment.getPlanId(),EnterprisePreplan.class);
            preplan.setUpdateDate(new Date());
            basicQueryService.update(preplan);

            AttachmentOperationRecord record = new AttachmentOperationRecord();
            record.setCompanyId(attachment.getPlanId());
            record.setOperationDate(new Date());
            record.setOperation("1");
            String account = userService.getUserName();
            record.setOprerationAccount(account);
            record.setId(UUID.randomUUID().toString());
            basicQueryService.save(record);
        }
    }

    //附件下载
    public void downPlanAttachment(String attachmentId, HttpServletResponse response) throws IOException {
        PlanAttachment attachment = basicQueryService.get(attachmentId, PlanAttachment.class);
        String url = attachment.getUrl();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(Paths.get(filePath, url).toFile());
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition", "attachment;filename=" + StringUtils.toUtf8String(attachment.getUrl()));
            FileCopyUtils.copy(fis, response.getOutputStream());
        } finally {
            fis.close();
        }

        AttachmentOperationRecord record = new AttachmentOperationRecord();
        record.setId(UUID.randomUUID().toString());
        record.setOperation("2");
        record.setOperationDate(new Date());
        record.setOprerationAccount(userService.getUserName());
        record.setCompanyId(attachment.getPlanId());
        basicQueryService.save(record);
        basicQueryService.delete(attachmentId,EnterpriseAttachment.class);
    }

    //根据预案id查询附件列表
    public Page listAttachmentByPlan(String planId, Integer pageNo, Integer pageSize) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("planId", planId);

        return basicQueryService.queryForPage("listAttachmentByPlan", param, Map.class, pageNo, pageSize);
    }


    //更新或修改
    public Integer saveOrUpdatePreplan(EnterprisePreplan preplan) throws Exception {
        if (preplan.getLevel() == null) {
            return 1;
        }

        preplan.setUpdateDate(new Date());
        if (preplan.getId() == null || getBycompanyId(preplan.getCompanyId()) == null) {
            basicQueryService.save(preplan);
        } else {
            basicQueryService.update(preplan);
        }
        EnterpriseInformation e = basicQueryService.get(preplan.getCompanyId(), EnterpriseInformation.class);
        //更新风险源的风险等级
        if (preplan.getLevel() != null) {
            logger.info("level:"+preplan.getLevel());
            logger.info("level:"+e.getRiskGrade());
            e.setRiskGrade((String) PreplanConstant.levelMap.get(preplan.getLevel()));
            logger.info("level:"+e.getRiskGrade());
        }
        basicQueryService.update(e);
        return 0;
    }

    //未备案预案备案
    public Integer setPreplan(Integer num) throws Exception {
        Integer sucNum = 0;
        List<EnterpriseInformation> list = basicQueryService.queryInfoList(new HashMap(),num);
        Map<String, String> map = basicQueryService.queryPlanList();
        for (EnterpriseInformation info : list) {
            if (map.containsKey(info.getCompanyId())) {
                continue;
            }
            saveEnterprisePreplan(info);
            sucNum++;
        }
        return sucNum;
    }
    //员备案数据保存
    public String saveEnterprisePreplan(EnterpriseInformation info) throws Exception {
        EnterprisePreplan plan = new EnterprisePreplan();
        plan.setRecordStatus(1);
        Date date = new Date();
        plan.setRecordtime(date);
        plan.setUpdateDate(date);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        if(org.apache.commons.lang.StringUtils.isNotBlank(info.getDocumentYear())){
            StringBuffer time = new StringBuffer()
                    .append(info.getDocumentYear().replace(",","").substring(0,4))
                    .append("-01-01 00:00:00");
            Date date1 = sdf.parse(time.toString());
            plan.setDocumentYear(date1);
        }else {
            Date date1 = sdf.parse("2018-01-01 00:00:00");
            plan.setDocumentYear(date);
        }
        plan.setCompanyId(info.getCompanyId());
        String riskGrade = info.getRiskGrade();
        if("较大".equals(riskGrade)){
            plan.setLevel(2);
        }else if("重大".equals(riskGrade)){
            plan.setLevel(3);
        }else {
            plan.setLevel(1);
        }
        return (String) basicQueryService.save(plan);

    }

    //根据企业id获取企业预案
    public Map getBycompanyId(String companyId) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("companyId", companyId);
        List<Map> list = basicQueryService.queryForList("getPreplanByCompanyId", param, Map.class, 0, 0);
        if (list.size() > 0) {
            return list.get(0);
        } else {
            return null;
        }
    }

    public String deleteAttacment(String id){
        PlanAttachment attachment = basicQueryService.get(id,PlanAttachment.class);
        if(attachment != null){
            AttachmentOperationRecord record = new AttachmentOperationRecord();
            record.setId(UUID.randomUUID().toString());
            record.setOperation("3");
            record.setOperationDate(new Date());
            record.setOprerationAccount(userService.getUserName());
            record.setCompanyId(attachment.getPlanId());
            basicQueryService.save(record);
            basicQueryService.delete(id,PlanAttachment.class);
            return "success";
        }
        return "fail";
    }
}
